
ARMobile_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a44  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004bd8  08004bd8  00014bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c20  08004c20  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004c20  08004c20  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c20  08004c20  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c20  08004c20  00014c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c24  08004c24  00014c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004c28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  2000000c  08004c34  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08004c34  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d022  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c81  00000000  00000000  0002d05e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d08  00000000  00000000  0002ece0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c50  00000000  00000000  0002f9e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ffdd  00000000  00000000  00030638  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b38b  00000000  00000000  00050615  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c638e  00000000  00000000  0005b9a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00121d2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036b8  00000000  00000000  00121dac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004bc0 	.word	0x08004bc0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08004bc0 	.word	0x08004bc0

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 fd0e 	bl	8000bf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f834 	bl	8000248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 f9dc 	bl	800059c <MX_GPIO_Init>
  MX_TIM2_Init();
 80001e4:	f000 f88c 	bl	8000300 <MX_TIM2_Init>
  MX_TIM3_Init();
 80001e8:	f000 f900 	bl	80003ec <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80001ec:	f000 f976 	bl	80004dc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80001f0:	f000 f9a4 	bl	800053c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Transmit(&huart2, "Initialized\n\r", sizeof("Initialized\n\r"), 100);
 80001f4:	2364      	movs	r3, #100	; 0x64
 80001f6:	220e      	movs	r2, #14
 80001f8:	490c      	ldr	r1, [pc, #48]	; (800022c <main+0x58>)
 80001fa:	480d      	ldr	r0, [pc, #52]	; (8000230 <main+0x5c>)
 80001fc:	f003 fcc2 	bl	8003b84 <HAL_UART_Transmit>

  // comm:
  HAL_UART_Receive_IT(&huart3, &ctrl_msg, 1);
 8000200:	2201      	movs	r2, #1
 8000202:	490c      	ldr	r1, [pc, #48]	; (8000234 <main+0x60>)
 8000204:	480c      	ldr	r0, [pc, #48]	; (8000238 <main+0x64>)
 8000206:	f003 fd51 	bl	8003cac <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &data, 1);
 800020a:	2201      	movs	r2, #1
 800020c:	490b      	ldr	r1, [pc, #44]	; (800023c <main+0x68>)
 800020e:	4808      	ldr	r0, [pc, #32]	; (8000230 <main+0x5c>)
 8000210:	f003 fd4c 	bl	8003cac <HAL_UART_Receive_IT>

  // PWM
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000214:	2108      	movs	r1, #8
 8000216:	480a      	ldr	r0, [pc, #40]	; (8000240 <main+0x6c>)
 8000218:	f002 fca0 	bl	8002b5c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800021c:	2100      	movs	r1, #0
 800021e:	4809      	ldr	r0, [pc, #36]	; (8000244 <main+0x70>)
 8000220:	f002 fc9c 	bl	8002b5c <HAL_TIM_PWM_Start>

  // Init movement
  Stop();
 8000224:	f000 fab0 	bl	8000788 <Stop>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000228:	e7fe      	b.n	8000228 <main+0x54>
 800022a:	bf00      	nop
 800022c:	08004bd8 	.word	0x08004bd8
 8000230:	20000148 	.word	0x20000148
 8000234:	20000029 	.word	0x20000029
 8000238:	2000002c 	.word	0x2000002c
 800023c:	20000028 	.word	0x20000028
 8000240:	200000fc 	.word	0x200000fc
 8000244:	200000b0 	.word	0x200000b0

08000248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b0a6      	sub	sp, #152	; 0x98
 800024c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000252:	2228      	movs	r2, #40	; 0x28
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f004 fcaa 	bl	8004bb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000260:	2200      	movs	r2, #0
 8000262:	601a      	str	r2, [r3, #0]
 8000264:	605a      	str	r2, [r3, #4]
 8000266:	609a      	str	r2, [r3, #8]
 8000268:	60da      	str	r2, [r3, #12]
 800026a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800026c:	1d3b      	adds	r3, r7, #4
 800026e:	2258      	movs	r2, #88	; 0x58
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f004 fc9c 	bl	8004bb0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000278:	2302      	movs	r3, #2
 800027a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027c:	2301      	movs	r3, #1
 800027e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000280:	2310      	movs	r3, #16
 8000282:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000286:	2300      	movs	r3, #0
 8000288:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000290:	4618      	mov	r0, r3
 8000292:	f001 f841 	bl	8001318 <HAL_RCC_OscConfig>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800029c:	f000 fb0a 	bl	80008b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a0:	230f      	movs	r3, #15
 80002a2:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002a4:	2300      	movs	r3, #0
 80002a6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80002ac:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80002b0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b2:	2300      	movs	r3, #0
 80002b4:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002b6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002ba:	2100      	movs	r1, #0
 80002bc:	4618      	mov	r0, r3
 80002be:	f001 ff41 	bl	8002144 <HAL_RCC_ClockConfig>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80002c8:	f000 faf4 	bl	80008b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 80002cc:	4b0b      	ldr	r3, [pc, #44]	; (80002fc <SystemClock_Config+0xb4>)
 80002ce:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80002d4:	2300      	movs	r3, #0
 80002d6:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80002d8:	2300      	movs	r3, #0
 80002da:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 80002dc:	2300      	movs	r3, #0
 80002de:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	4618      	mov	r0, r3
 80002e4:	f002 f964 	bl	80025b0 <HAL_RCCEx_PeriphCLKConfig>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80002ee:	f000 fae1 	bl	80008b4 <Error_Handler>
  }
}
 80002f2:	bf00      	nop
 80002f4:	3798      	adds	r7, #152	; 0x98
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	00300006 	.word	0x00300006

08000300 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b08e      	sub	sp, #56	; 0x38
 8000304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000306:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	605a      	str	r2, [r3, #4]
 8000310:	609a      	str	r2, [r3, #8]
 8000312:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000314:	f107 031c 	add.w	r3, r7, #28
 8000318:	2200      	movs	r2, #0
 800031a:	601a      	str	r2, [r3, #0]
 800031c:	605a      	str	r2, [r3, #4]
 800031e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000320:	463b      	mov	r3, r7
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
 8000326:	605a      	str	r2, [r3, #4]
 8000328:	609a      	str	r2, [r3, #8]
 800032a:	60da      	str	r2, [r3, #12]
 800032c:	611a      	str	r2, [r3, #16]
 800032e:	615a      	str	r2, [r3, #20]
 8000330:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000332:	4b2d      	ldr	r3, [pc, #180]	; (80003e8 <MX_TIM2_Init+0xe8>)
 8000334:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000338:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4000;
 800033a:	4b2b      	ldr	r3, [pc, #172]	; (80003e8 <MX_TIM2_Init+0xe8>)
 800033c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000340:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000342:	4b29      	ldr	r3, [pc, #164]	; (80003e8 <MX_TIM2_Init+0xe8>)
 8000344:	2200      	movs	r2, #0
 8000346:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000348:	4b27      	ldr	r3, [pc, #156]	; (80003e8 <MX_TIM2_Init+0xe8>)
 800034a:	2263      	movs	r2, #99	; 0x63
 800034c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800034e:	4b26      	ldr	r3, [pc, #152]	; (80003e8 <MX_TIM2_Init+0xe8>)
 8000350:	2200      	movs	r2, #0
 8000352:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000354:	4b24      	ldr	r3, [pc, #144]	; (80003e8 <MX_TIM2_Init+0xe8>)
 8000356:	2200      	movs	r2, #0
 8000358:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800035a:	4823      	ldr	r0, [pc, #140]	; (80003e8 <MX_TIM2_Init+0xe8>)
 800035c:	f002 fb46 	bl	80029ec <HAL_TIM_Base_Init>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000366:	f000 faa5 	bl	80008b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800036a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800036e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000370:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000374:	4619      	mov	r1, r3
 8000376:	481c      	ldr	r0, [pc, #112]	; (80003e8 <MX_TIM2_Init+0xe8>)
 8000378:	f002 fe0c 	bl	8002f94 <HAL_TIM_ConfigClockSource>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000382:	f000 fa97 	bl	80008b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000386:	4818      	ldr	r0, [pc, #96]	; (80003e8 <MX_TIM2_Init+0xe8>)
 8000388:	f002 fb87 	bl	8002a9a <HAL_TIM_PWM_Init>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000392:	f000 fa8f 	bl	80008b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000396:	2300      	movs	r3, #0
 8000398:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800039a:	2300      	movs	r3, #0
 800039c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800039e:	f107 031c 	add.w	r3, r7, #28
 80003a2:	4619      	mov	r1, r3
 80003a4:	4810      	ldr	r0, [pc, #64]	; (80003e8 <MX_TIM2_Init+0xe8>)
 80003a6:	f003 fb13 	bl	80039d0 <HAL_TIMEx_MasterConfigSynchronization>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80003b0:	f000 fa80 	bl	80008b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003b4:	2360      	movs	r3, #96	; 0x60
 80003b6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 80003b8:	2332      	movs	r3, #50	; 0x32
 80003ba:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003bc:	2300      	movs	r3, #0
 80003be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003c0:	2300      	movs	r3, #0
 80003c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80003c4:	463b      	mov	r3, r7
 80003c6:	2208      	movs	r2, #8
 80003c8:	4619      	mov	r1, r3
 80003ca:	4807      	ldr	r0, [pc, #28]	; (80003e8 <MX_TIM2_Init+0xe8>)
 80003cc:	f002 fcd2 	bl	8002d74 <HAL_TIM_PWM_ConfigChannel>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80003d6:	f000 fa6d 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80003da:	4803      	ldr	r0, [pc, #12]	; (80003e8 <MX_TIM2_Init+0xe8>)
 80003dc:	f000 fac4 	bl	8000968 <HAL_TIM_MspPostInit>

}
 80003e0:	bf00      	nop
 80003e2:	3738      	adds	r7, #56	; 0x38
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	200000fc 	.word	0x200000fc

080003ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b08e      	sub	sp, #56	; 0x38
 80003f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	605a      	str	r2, [r3, #4]
 80003fc:	609a      	str	r2, [r3, #8]
 80003fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000400:	f107 031c 	add.w	r3, r7, #28
 8000404:	2200      	movs	r2, #0
 8000406:	601a      	str	r2, [r3, #0]
 8000408:	605a      	str	r2, [r3, #4]
 800040a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800040c:	463b      	mov	r3, r7
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	605a      	str	r2, [r3, #4]
 8000414:	609a      	str	r2, [r3, #8]
 8000416:	60da      	str	r2, [r3, #12]
 8000418:	611a      	str	r2, [r3, #16]
 800041a:	615a      	str	r2, [r3, #20]
 800041c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800041e:	4b2d      	ldr	r3, [pc, #180]	; (80004d4 <MX_TIM3_Init+0xe8>)
 8000420:	4a2d      	ldr	r2, [pc, #180]	; (80004d8 <MX_TIM3_Init+0xec>)
 8000422:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4000;
 8000424:	4b2b      	ldr	r3, [pc, #172]	; (80004d4 <MX_TIM3_Init+0xe8>)
 8000426:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800042a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800042c:	4b29      	ldr	r3, [pc, #164]	; (80004d4 <MX_TIM3_Init+0xe8>)
 800042e:	2200      	movs	r2, #0
 8000430:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000432:	4b28      	ldr	r3, [pc, #160]	; (80004d4 <MX_TIM3_Init+0xe8>)
 8000434:	2263      	movs	r2, #99	; 0x63
 8000436:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000438:	4b26      	ldr	r3, [pc, #152]	; (80004d4 <MX_TIM3_Init+0xe8>)
 800043a:	2200      	movs	r2, #0
 800043c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800043e:	4b25      	ldr	r3, [pc, #148]	; (80004d4 <MX_TIM3_Init+0xe8>)
 8000440:	2200      	movs	r2, #0
 8000442:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000444:	4823      	ldr	r0, [pc, #140]	; (80004d4 <MX_TIM3_Init+0xe8>)
 8000446:	f002 fad1 	bl	80029ec <HAL_TIM_Base_Init>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000450:	f000 fa30 	bl	80008b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000454:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000458:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800045a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800045e:	4619      	mov	r1, r3
 8000460:	481c      	ldr	r0, [pc, #112]	; (80004d4 <MX_TIM3_Init+0xe8>)
 8000462:	f002 fd97 	bl	8002f94 <HAL_TIM_ConfigClockSource>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800046c:	f000 fa22 	bl	80008b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000470:	4818      	ldr	r0, [pc, #96]	; (80004d4 <MX_TIM3_Init+0xe8>)
 8000472:	f002 fb12 	bl	8002a9a <HAL_TIM_PWM_Init>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800047c:	f000 fa1a 	bl	80008b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000480:	2300      	movs	r3, #0
 8000482:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000484:	2300      	movs	r3, #0
 8000486:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000488:	f107 031c 	add.w	r3, r7, #28
 800048c:	4619      	mov	r1, r3
 800048e:	4811      	ldr	r0, [pc, #68]	; (80004d4 <MX_TIM3_Init+0xe8>)
 8000490:	f003 fa9e 	bl	80039d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800049a:	f000 fa0b 	bl	80008b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800049e:	2360      	movs	r3, #96	; 0x60
 80004a0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 80004a2:	2332      	movs	r3, #50	; 0x32
 80004a4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004a6:	2300      	movs	r3, #0
 80004a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004aa:	2300      	movs	r3, #0
 80004ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004ae:	463b      	mov	r3, r7
 80004b0:	2200      	movs	r2, #0
 80004b2:	4619      	mov	r1, r3
 80004b4:	4807      	ldr	r0, [pc, #28]	; (80004d4 <MX_TIM3_Init+0xe8>)
 80004b6:	f002 fc5d 	bl	8002d74 <HAL_TIM_PWM_ConfigChannel>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d001      	beq.n	80004c4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80004c0:	f000 f9f8 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80004c4:	4803      	ldr	r0, [pc, #12]	; (80004d4 <MX_TIM3_Init+0xe8>)
 80004c6:	f000 fa4f 	bl	8000968 <HAL_TIM_MspPostInit>

}
 80004ca:	bf00      	nop
 80004cc:	3738      	adds	r7, #56	; 0x38
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	200000b0 	.word	0x200000b0
 80004d8:	40000400 	.word	0x40000400

080004dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004e0:	4b14      	ldr	r3, [pc, #80]	; (8000534 <MX_USART2_UART_Init+0x58>)
 80004e2:	4a15      	ldr	r2, [pc, #84]	; (8000538 <MX_USART2_UART_Init+0x5c>)
 80004e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004e6:	4b13      	ldr	r3, [pc, #76]	; (8000534 <MX_USART2_UART_Init+0x58>)
 80004e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004ee:	4b11      	ldr	r3, [pc, #68]	; (8000534 <MX_USART2_UART_Init+0x58>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004f4:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <MX_USART2_UART_Init+0x58>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004fa:	4b0e      	ldr	r3, [pc, #56]	; (8000534 <MX_USART2_UART_Init+0x58>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000500:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <MX_USART2_UART_Init+0x58>)
 8000502:	220c      	movs	r2, #12
 8000504:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000506:	4b0b      	ldr	r3, [pc, #44]	; (8000534 <MX_USART2_UART_Init+0x58>)
 8000508:	2200      	movs	r2, #0
 800050a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800050c:	4b09      	ldr	r3, [pc, #36]	; (8000534 <MX_USART2_UART_Init+0x58>)
 800050e:	2200      	movs	r2, #0
 8000510:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000512:	4b08      	ldr	r3, [pc, #32]	; (8000534 <MX_USART2_UART_Init+0x58>)
 8000514:	2200      	movs	r2, #0
 8000516:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000518:	4b06      	ldr	r3, [pc, #24]	; (8000534 <MX_USART2_UART_Init+0x58>)
 800051a:	2200      	movs	r2, #0
 800051c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800051e:	4805      	ldr	r0, [pc, #20]	; (8000534 <MX_USART2_UART_Init+0x58>)
 8000520:	f003 fae2 	bl	8003ae8 <HAL_UART_Init>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800052a:	f000 f9c3 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	20000148 	.word	0x20000148
 8000538:	40004400 	.word	0x40004400

0800053c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000540:	4b14      	ldr	r3, [pc, #80]	; (8000594 <MX_USART3_UART_Init+0x58>)
 8000542:	4a15      	ldr	r2, [pc, #84]	; (8000598 <MX_USART3_UART_Init+0x5c>)
 8000544:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000546:	4b13      	ldr	r3, [pc, #76]	; (8000594 <MX_USART3_UART_Init+0x58>)
 8000548:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800054c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800054e:	4b11      	ldr	r3, [pc, #68]	; (8000594 <MX_USART3_UART_Init+0x58>)
 8000550:	2200      	movs	r2, #0
 8000552:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000554:	4b0f      	ldr	r3, [pc, #60]	; (8000594 <MX_USART3_UART_Init+0x58>)
 8000556:	2200      	movs	r2, #0
 8000558:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800055a:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <MX_USART3_UART_Init+0x58>)
 800055c:	2200      	movs	r2, #0
 800055e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000560:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <MX_USART3_UART_Init+0x58>)
 8000562:	220c      	movs	r2, #12
 8000564:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000566:	4b0b      	ldr	r3, [pc, #44]	; (8000594 <MX_USART3_UART_Init+0x58>)
 8000568:	2200      	movs	r2, #0
 800056a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800056c:	4b09      	ldr	r3, [pc, #36]	; (8000594 <MX_USART3_UART_Init+0x58>)
 800056e:	2200      	movs	r2, #0
 8000570:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000572:	4b08      	ldr	r3, [pc, #32]	; (8000594 <MX_USART3_UART_Init+0x58>)
 8000574:	2200      	movs	r2, #0
 8000576:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <MX_USART3_UART_Init+0x58>)
 800057a:	2200      	movs	r2, #0
 800057c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800057e:	4805      	ldr	r0, [pc, #20]	; (8000594 <MX_USART3_UART_Init+0x58>)
 8000580:	f003 fab2 	bl	8003ae8 <HAL_UART_Init>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800058a:	f000 f993 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	2000002c 	.word	0x2000002c
 8000598:	40004800 	.word	0x40004800

0800059c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b088      	sub	sp, #32
 80005a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a2:	f107 030c 	add.w	r3, r7, #12
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]
 80005ac:	609a      	str	r2, [r3, #8]
 80005ae:	60da      	str	r2, [r3, #12]
 80005b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b2:	4b31      	ldr	r3, [pc, #196]	; (8000678 <MX_GPIO_Init+0xdc>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	4a30      	ldr	r2, [pc, #192]	; (8000678 <MX_GPIO_Init+0xdc>)
 80005b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005bc:	6153      	str	r3, [r2, #20]
 80005be:	4b2e      	ldr	r3, [pc, #184]	; (8000678 <MX_GPIO_Init+0xdc>)
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ca:	4b2b      	ldr	r3, [pc, #172]	; (8000678 <MX_GPIO_Init+0xdc>)
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	4a2a      	ldr	r2, [pc, #168]	; (8000678 <MX_GPIO_Init+0xdc>)
 80005d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005d4:	6153      	str	r3, [r2, #20]
 80005d6:	4b28      	ldr	r3, [pc, #160]	; (8000678 <MX_GPIO_Init+0xdc>)
 80005d8:	695b      	ldr	r3, [r3, #20]
 80005da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e2:	4b25      	ldr	r3, [pc, #148]	; (8000678 <MX_GPIO_Init+0xdc>)
 80005e4:	695b      	ldr	r3, [r3, #20]
 80005e6:	4a24      	ldr	r2, [pc, #144]	; (8000678 <MX_GPIO_Init+0xdc>)
 80005e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005ec:	6153      	str	r3, [r2, #20]
 80005ee:	4b22      	ldr	r3, [pc, #136]	; (8000678 <MX_GPIO_Init+0xdc>)
 80005f0:	695b      	ldr	r3, [r3, #20]
 80005f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005f6:	603b      	str	r3, [r7, #0]
 80005f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, dir_right_2_Pin|dir_right_1_Pin, GPIO_PIN_RESET);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2103      	movs	r1, #3
 80005fe:	481f      	ldr	r0, [pc, #124]	; (800067c <MX_GPIO_Init+0xe0>)
 8000600:	f000 fe72 	bl	80012e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(dir_left_1_GPIO_Port, dir_left_1_Pin, GPIO_PIN_RESET);
 8000604:	2200      	movs	r2, #0
 8000606:	2110      	movs	r1, #16
 8000608:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800060c:	f000 fe6c 	bl	80012e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(dir_left_2_GPIO_Port, dir_left_2_Pin, GPIO_PIN_RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	2101      	movs	r1, #1
 8000614:	481a      	ldr	r0, [pc, #104]	; (8000680 <MX_GPIO_Init+0xe4>)
 8000616:	f000 fe67 	bl	80012e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : dir_right_2_Pin dir_right_1_Pin */
  GPIO_InitStruct.Pin = dir_right_2_Pin|dir_right_1_Pin;
 800061a:	2303      	movs	r3, #3
 800061c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061e:	2301      	movs	r3, #1
 8000620:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000626:	2300      	movs	r3, #0
 8000628:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800062a:	f107 030c 	add.w	r3, r7, #12
 800062e:	4619      	mov	r1, r3
 8000630:	4812      	ldr	r0, [pc, #72]	; (800067c <MX_GPIO_Init+0xe0>)
 8000632:	f000 fccf 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : dir_left_1_Pin */
  GPIO_InitStruct.Pin = dir_left_1_Pin;
 8000636:	2310      	movs	r3, #16
 8000638:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063a:	2301      	movs	r3, #1
 800063c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	2300      	movs	r3, #0
 8000640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000642:	2300      	movs	r3, #0
 8000644:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(dir_left_1_GPIO_Port, &GPIO_InitStruct);
 8000646:	f107 030c 	add.w	r3, r7, #12
 800064a:	4619      	mov	r1, r3
 800064c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000650:	f000 fcc0 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : dir_left_2_Pin */
  GPIO_InitStruct.Pin = dir_left_2_Pin;
 8000654:	2301      	movs	r3, #1
 8000656:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000658:	2301      	movs	r3, #1
 800065a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000660:	2300      	movs	r3, #0
 8000662:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(dir_left_2_GPIO_Port, &GPIO_InitStruct);
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	4619      	mov	r1, r3
 800066a:	4805      	ldr	r0, [pc, #20]	; (8000680 <MX_GPIO_Init+0xe4>)
 800066c:	f000 fcb2 	bl	8000fd4 <HAL_GPIO_Init>

}
 8000670:	bf00      	nop
 8000672:	3720      	adds	r7, #32
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40021000 	.word	0x40021000
 800067c:	48000800 	.word	0x48000800
 8000680:	48000400 	.word	0x48000400

08000684 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart3.Instance){
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	4b39      	ldr	r3, [pc, #228]	; (8000778 <HAL_UART_RxCpltCallback+0xf4>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	429a      	cmp	r2, r3
 8000696:	d105      	bne.n	80006a4 <HAL_UART_RxCpltCallback+0x20>
		// bluetooth message



		HAL_UART_Receive_IT(&huart3, &ctrl_msg, 1);
 8000698:	2201      	movs	r2, #1
 800069a:	4938      	ldr	r1, [pc, #224]	; (800077c <HAL_UART_RxCpltCallback+0xf8>)
 800069c:	4836      	ldr	r0, [pc, #216]	; (8000778 <HAL_UART_RxCpltCallback+0xf4>)
 800069e:	f003 fb05 	bl	8003cac <HAL_UART_Receive_IT>
		}


		HAL_UART_Receive_IT(&huart2, &data, 1);
	}
	return;
 80006a2:	e065      	b.n	8000770 <HAL_UART_RxCpltCallback+0xec>
	if(huart->Instance == huart2.Instance){
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681a      	ldr	r2, [r3, #0]
 80006a8:	4b35      	ldr	r3, [pc, #212]	; (8000780 <HAL_UART_RxCpltCallback+0xfc>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	429a      	cmp	r2, r3
 80006ae:	d15f      	bne.n	8000770 <HAL_UART_RxCpltCallback+0xec>
		HAL_UART_Transmit(&huart2, &data, 1, 10);
 80006b0:	230a      	movs	r3, #10
 80006b2:	2201      	movs	r2, #1
 80006b4:	4933      	ldr	r1, [pc, #204]	; (8000784 <HAL_UART_RxCpltCallback+0x100>)
 80006b6:	4832      	ldr	r0, [pc, #200]	; (8000780 <HAL_UART_RxCpltCallback+0xfc>)
 80006b8:	f003 fa64 	bl	8003b84 <HAL_UART_Transmit>
		switch(data){
 80006bc:	4b31      	ldr	r3, [pc, #196]	; (8000784 <HAL_UART_RxCpltCallback+0x100>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	3b61      	subs	r3, #97	; 0x61
 80006c2:	2b13      	cmp	r3, #19
 80006c4:	d84d      	bhi.n	8000762 <HAL_UART_RxCpltCallback+0xde>
 80006c6:	a201      	add	r2, pc, #4	; (adr r2, 80006cc <HAL_UART_RxCpltCallback+0x48>)
 80006c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006cc:	08000735 	.word	0x08000735
 80006d0:	08000763 	.word	0x08000763
 80006d4:	08000763 	.word	0x08000763
 80006d8:	08000725 	.word	0x08000725
 80006dc:	0800071d 	.word	0x0800071d
 80006e0:	08000745 	.word	0x08000745
 80006e4:	08000755 	.word	0x08000755
 80006e8:	08000763 	.word	0x08000763
 80006ec:	08000763 	.word	0x08000763
 80006f0:	08000763 	.word	0x08000763
 80006f4:	08000763 	.word	0x08000763
 80006f8:	08000763 	.word	0x08000763
 80006fc:	08000763 	.word	0x08000763
 8000700:	08000763 	.word	0x08000763
 8000704:	08000763 	.word	0x08000763
 8000708:	08000763 	.word	0x08000763
 800070c:	0800072d 	.word	0x0800072d
 8000710:	0800073d 	.word	0x0800073d
 8000714:	0800075d 	.word	0x0800075d
 8000718:	0800074d 	.word	0x0800074d
			Set_Dir_Right(FORWARD);
 800071c:	2000      	movs	r0, #0
 800071e:	f000 f877 	bl	8000810 <Set_Dir_Right>
			break;
 8000722:	e01f      	b.n	8000764 <HAL_UART_RxCpltCallback+0xe0>
			Set_Dir_Right(BACKWARD);
 8000724:	2001      	movs	r0, #1
 8000726:	f000 f873 	bl	8000810 <Set_Dir_Right>
			break;
 800072a:	e01b      	b.n	8000764 <HAL_UART_RxCpltCallback+0xe0>
			Set_Dir_Left(FORWARD);
 800072c:	2000      	movs	r0, #0
 800072e:	f000 f897 	bl	8000860 <Set_Dir_Left>
			break;
 8000732:	e017      	b.n	8000764 <HAL_UART_RxCpltCallback+0xe0>
			Set_Dir_Left(BACKWARD);
 8000734:	2001      	movs	r0, #1
 8000736:	f000 f893 	bl	8000860 <Set_Dir_Left>
			break;
 800073a:	e013      	b.n	8000764 <HAL_UART_RxCpltCallback+0xe0>
			Set_Speed_Left(70);
 800073c:	2046      	movs	r0, #70	; 0x46
 800073e:	f000 f857 	bl	80007f0 <Set_Speed_Left>
			break;
 8000742:	e00f      	b.n	8000764 <HAL_UART_RxCpltCallback+0xe0>
			Set_Speed_Left(30);
 8000744:	201e      	movs	r0, #30
 8000746:	f000 f853 	bl	80007f0 <Set_Speed_Left>
			break;
 800074a:	e00b      	b.n	8000764 <HAL_UART_RxCpltCallback+0xe0>
			Set_Speed_Right(70);
 800074c:	2046      	movs	r0, #70	; 0x46
 800074e:	f000 f83f 	bl	80007d0 <Set_Speed_Right>
			break;
 8000752:	e007      	b.n	8000764 <HAL_UART_RxCpltCallback+0xe0>
			Set_Speed_Right(30);
 8000754:	201e      	movs	r0, #30
 8000756:	f000 f83b 	bl	80007d0 <Set_Speed_Right>
			break;
 800075a:	e003      	b.n	8000764 <HAL_UART_RxCpltCallback+0xe0>
			Stop();
 800075c:	f000 f814 	bl	8000788 <Stop>
			break;
 8000760:	e000      	b.n	8000764 <HAL_UART_RxCpltCallback+0xe0>
			break;
 8000762:	bf00      	nop
		HAL_UART_Receive_IT(&huart2, &data, 1);
 8000764:	2201      	movs	r2, #1
 8000766:	4907      	ldr	r1, [pc, #28]	; (8000784 <HAL_UART_RxCpltCallback+0x100>)
 8000768:	4805      	ldr	r0, [pc, #20]	; (8000780 <HAL_UART_RxCpltCallback+0xfc>)
 800076a:	f003 fa9f 	bl	8003cac <HAL_UART_Receive_IT>
	return;
 800076e:	bf00      	nop
 8000770:	bf00      	nop
}
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	2000002c 	.word	0x2000002c
 800077c:	20000029 	.word	0x20000029
 8000780:	20000148 	.word	0x20000148
 8000784:	20000028 	.word	0x20000028

08000788 <Stop>:

void Stop(void){
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800078c:	2200      	movs	r2, #0
 800078e:	2110      	movs	r1, #16
 8000790:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000794:	f000 fda8 	bl	80012e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000798:	2200      	movs	r2, #0
 800079a:	2101      	movs	r1, #1
 800079c:	480a      	ldr	r0, [pc, #40]	; (80007c8 <Stop+0x40>)
 800079e:	f000 fda3 	bl	80012e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2102      	movs	r1, #2
 80007a6:	4809      	ldr	r0, [pc, #36]	; (80007cc <Stop+0x44>)
 80007a8:	f000 fd9e 	bl	80012e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 80007ac:	2200      	movs	r2, #0
 80007ae:	2101      	movs	r1, #1
 80007b0:	4806      	ldr	r0, [pc, #24]	; (80007cc <Stop+0x44>)
 80007b2:	f000 fd99 	bl	80012e8 <HAL_GPIO_WritePin>

	Set_Speed_Left(0);
 80007b6:	2000      	movs	r0, #0
 80007b8:	f000 f81a 	bl	80007f0 <Set_Speed_Left>
	Set_Speed_Right(0);
 80007bc:	2000      	movs	r0, #0
 80007be:	f000 f807 	bl	80007d0 <Set_Speed_Right>

	return;
 80007c2:	bf00      	nop
}
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	48000400 	.word	0x48000400
 80007cc:	48000800 	.word	0x48000800

080007d0 <Set_Speed_Right>:

void Set_Speed_Right(uint8_t param){
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
	TIM3->CCR1 = param;
 80007da:	4a04      	ldr	r2, [pc, #16]	; (80007ec <Set_Speed_Right+0x1c>)
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	6353      	str	r3, [r2, #52]	; 0x34
	return;
 80007e0:	bf00      	nop
}
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	40000400 	.word	0x40000400

080007f0 <Set_Speed_Left>:

void Set_Speed_Left(uint8_t param){
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	71fb      	strb	r3, [r7, #7]
	TIM2->CCR3 = param;
 80007fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	63d3      	str	r3, [r2, #60]	; 0x3c
	return;
 8000802:	bf00      	nop
}
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
	...

08000810 <Set_Dir_Right>:

static void Set_Dir_Right(DirectionTypeDef dir){
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
	switch (dir){
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d002      	beq.n	8000826 <Set_Dir_Right+0x16>
 8000820:	2b01      	cmp	r3, #1
 8000822:	d00b      	beq.n	800083c <Set_Dir_Right+0x2c>
	case BACKWARD:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
		break;
	default:
		break;
 8000824:	e015      	b.n	8000852 <Set_Dir_Right+0x42>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 8000826:	2201      	movs	r2, #1
 8000828:	2102      	movs	r1, #2
 800082a:	480c      	ldr	r0, [pc, #48]	; (800085c <Set_Dir_Right+0x4c>)
 800082c:	f000 fd5c 	bl	80012e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 8000830:	2200      	movs	r2, #0
 8000832:	2101      	movs	r1, #1
 8000834:	4809      	ldr	r0, [pc, #36]	; (800085c <Set_Dir_Right+0x4c>)
 8000836:	f000 fd57 	bl	80012e8 <HAL_GPIO_WritePin>
		break;
 800083a:	e00a      	b.n	8000852 <Set_Dir_Right+0x42>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 800083c:	2200      	movs	r2, #0
 800083e:	2102      	movs	r1, #2
 8000840:	4806      	ldr	r0, [pc, #24]	; (800085c <Set_Dir_Right+0x4c>)
 8000842:	f000 fd51 	bl	80012e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8000846:	2201      	movs	r2, #1
 8000848:	2101      	movs	r1, #1
 800084a:	4804      	ldr	r0, [pc, #16]	; (800085c <Set_Dir_Right+0x4c>)
 800084c:	f000 fd4c 	bl	80012e8 <HAL_GPIO_WritePin>
		break;
 8000850:	bf00      	nop
	}
	return;
 8000852:	bf00      	nop
}
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	48000800 	.word	0x48000800

08000860 <Set_Dir_Left>:

static void Set_Dir_Left(DirectionTypeDef dir){
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	71fb      	strb	r3, [r7, #7]
	switch (dir){
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d002      	beq.n	8000876 <Set_Dir_Left+0x16>
 8000870:	2b01      	cmp	r3, #1
 8000872:	d00c      	beq.n	800088e <Set_Dir_Left+0x2e>
		case BACKWARD:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
			break;
		default:
			break;
 8000874:	e017      	b.n	80008a6 <Set_Dir_Left+0x46>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8000876:	2201      	movs	r2, #1
 8000878:	2110      	movs	r1, #16
 800087a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800087e:	f000 fd33 	bl	80012e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	2101      	movs	r1, #1
 8000886:	480a      	ldr	r0, [pc, #40]	; (80008b0 <Set_Dir_Left+0x50>)
 8000888:	f000 fd2e 	bl	80012e8 <HAL_GPIO_WritePin>
			break;
 800088c:	e00b      	b.n	80008a6 <Set_Dir_Left+0x46>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2110      	movs	r1, #16
 8000892:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000896:	f000 fd27 	bl	80012e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 800089a:	2201      	movs	r2, #1
 800089c:	2101      	movs	r1, #1
 800089e:	4804      	ldr	r0, [pc, #16]	; (80008b0 <Set_Dir_Left+0x50>)
 80008a0:	f000 fd22 	bl	80012e8 <HAL_GPIO_WritePin>
			break;
 80008a4:	bf00      	nop
		}
	return;
 80008a6:	bf00      	nop
}
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	48000400 	.word	0x48000400

080008b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ba:	e7fe      	b.n	80008ba <Error_Handler+0x6>

080008bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c2:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <HAL_MspInit+0x44>)
 80008c4:	699b      	ldr	r3, [r3, #24]
 80008c6:	4a0e      	ldr	r2, [pc, #56]	; (8000900 <HAL_MspInit+0x44>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6193      	str	r3, [r2, #24]
 80008ce:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <HAL_MspInit+0x44>)
 80008d0:	699b      	ldr	r3, [r3, #24]
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <HAL_MspInit+0x44>)
 80008dc:	69db      	ldr	r3, [r3, #28]
 80008de:	4a08      	ldr	r2, [pc, #32]	; (8000900 <HAL_MspInit+0x44>)
 80008e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e4:	61d3      	str	r3, [r2, #28]
 80008e6:	4b06      	ldr	r3, [pc, #24]	; (8000900 <HAL_MspInit+0x44>)
 80008e8:	69db      	ldr	r3, [r3, #28]
 80008ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f2:	bf00      	nop
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	40021000 	.word	0x40021000

08000904 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000914:	d10c      	bne.n	8000930 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000916:	4b12      	ldr	r3, [pc, #72]	; (8000960 <HAL_TIM_Base_MspInit+0x5c>)
 8000918:	69db      	ldr	r3, [r3, #28]
 800091a:	4a11      	ldr	r2, [pc, #68]	; (8000960 <HAL_TIM_Base_MspInit+0x5c>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	61d3      	str	r3, [r2, #28]
 8000922:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <HAL_TIM_Base_MspInit+0x5c>)
 8000924:	69db      	ldr	r3, [r3, #28]
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800092e:	e010      	b.n	8000952 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a0b      	ldr	r2, [pc, #44]	; (8000964 <HAL_TIM_Base_MspInit+0x60>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d10b      	bne.n	8000952 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <HAL_TIM_Base_MspInit+0x5c>)
 800093c:	69db      	ldr	r3, [r3, #28]
 800093e:	4a08      	ldr	r2, [pc, #32]	; (8000960 <HAL_TIM_Base_MspInit+0x5c>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	61d3      	str	r3, [r2, #28]
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <HAL_TIM_Base_MspInit+0x5c>)
 8000948:	69db      	ldr	r3, [r3, #28]
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]
}
 8000952:	bf00      	nop
 8000954:	3714      	adds	r7, #20
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	40021000 	.word	0x40021000
 8000964:	40000400 	.word	0x40000400

08000968 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	; 0x28
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000988:	d11d      	bne.n	80009c6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800098a:	4b21      	ldr	r3, [pc, #132]	; (8000a10 <HAL_TIM_MspPostInit+0xa8>)
 800098c:	695b      	ldr	r3, [r3, #20]
 800098e:	4a20      	ldr	r2, [pc, #128]	; (8000a10 <HAL_TIM_MspPostInit+0xa8>)
 8000990:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000994:	6153      	str	r3, [r2, #20]
 8000996:	4b1e      	ldr	r3, [pc, #120]	; (8000a10 <HAL_TIM_MspPostInit+0xa8>)
 8000998:	695b      	ldr	r3, [r3, #20]
 800099a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = PWM_left_Pin;
 80009a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2302      	movs	r3, #2
 80009aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80009b4:	2301      	movs	r3, #1
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_left_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	4619      	mov	r1, r3
 80009be:	4815      	ldr	r0, [pc, #84]	; (8000a14 <HAL_TIM_MspPostInit+0xac>)
 80009c0:	f000 fb08 	bl	8000fd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80009c4:	e020      	b.n	8000a08 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a13      	ldr	r2, [pc, #76]	; (8000a18 <HAL_TIM_MspPostInit+0xb0>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d11b      	bne.n	8000a08 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <HAL_TIM_MspPostInit+0xa8>)
 80009d2:	695b      	ldr	r3, [r3, #20]
 80009d4:	4a0e      	ldr	r2, [pc, #56]	; (8000a10 <HAL_TIM_MspPostInit+0xa8>)
 80009d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009da:	6153      	str	r3, [r2, #20]
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <HAL_TIM_MspPostInit+0xa8>)
 80009de:	695b      	ldr	r3, [r3, #20]
 80009e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_right_Pin;
 80009e8:	2310      	movs	r3, #16
 80009ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ec:	2302      	movs	r3, #2
 80009ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	2300      	movs	r3, #0
 80009f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80009f8:	2302      	movs	r3, #2
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_right_GPIO_Port, &GPIO_InitStruct);
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4619      	mov	r1, r3
 8000a02:	4804      	ldr	r0, [pc, #16]	; (8000a14 <HAL_TIM_MspPostInit+0xac>)
 8000a04:	f000 fae6 	bl	8000fd4 <HAL_GPIO_Init>
}
 8000a08:	bf00      	nop
 8000a0a:	3728      	adds	r7, #40	; 0x28
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40021000 	.word	0x40021000
 8000a14:	48000400 	.word	0x48000400
 8000a18:	40000400 	.word	0x40000400

08000a1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08c      	sub	sp, #48	; 0x30
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a24:	f107 031c 	add.w	r3, r7, #28
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a33      	ldr	r2, [pc, #204]	; (8000b08 <HAL_UART_MspInit+0xec>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d131      	bne.n	8000aa2 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a3e:	4b33      	ldr	r3, [pc, #204]	; (8000b0c <HAL_UART_MspInit+0xf0>)
 8000a40:	69db      	ldr	r3, [r3, #28]
 8000a42:	4a32      	ldr	r2, [pc, #200]	; (8000b0c <HAL_UART_MspInit+0xf0>)
 8000a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a48:	61d3      	str	r3, [r2, #28]
 8000a4a:	4b30      	ldr	r3, [pc, #192]	; (8000b0c <HAL_UART_MspInit+0xf0>)
 8000a4c:	69db      	ldr	r3, [r3, #28]
 8000a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a52:	61bb      	str	r3, [r7, #24]
 8000a54:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	4b2d      	ldr	r3, [pc, #180]	; (8000b0c <HAL_UART_MspInit+0xf0>)
 8000a58:	695b      	ldr	r3, [r3, #20]
 8000a5a:	4a2c      	ldr	r2, [pc, #176]	; (8000b0c <HAL_UART_MspInit+0xf0>)
 8000a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a60:	6153      	str	r3, [r2, #20]
 8000a62:	4b2a      	ldr	r3, [pc, #168]	; (8000b0c <HAL_UART_MspInit+0xf0>)
 8000a64:	695b      	ldr	r3, [r3, #20]
 8000a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a6a:	617b      	str	r3, [r7, #20]
 8000a6c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = serial_debug_tx_Pin|serial_debug_rx_Pin;
 8000a6e:	230c      	movs	r3, #12
 8000a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a72:	2302      	movs	r3, #2
 8000a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a7e:	2307      	movs	r3, #7
 8000a80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	4619      	mov	r1, r3
 8000a88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a8c:	f000 faa2 	bl	8000fd4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2100      	movs	r1, #0
 8000a94:	2026      	movs	r0, #38	; 0x26
 8000a96:	f000 f9f0 	bl	8000e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a9a:	2026      	movs	r0, #38	; 0x26
 8000a9c:	f000 fa09 	bl	8000eb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000aa0:	e02d      	b.n	8000afe <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART3)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a1a      	ldr	r2, [pc, #104]	; (8000b10 <HAL_UART_MspInit+0xf4>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d128      	bne.n	8000afe <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000aac:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <HAL_UART_MspInit+0xf0>)
 8000aae:	69db      	ldr	r3, [r3, #28]
 8000ab0:	4a16      	ldr	r2, [pc, #88]	; (8000b0c <HAL_UART_MspInit+0xf0>)
 8000ab2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ab6:	61d3      	str	r3, [r2, #28]
 8000ab8:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <HAL_UART_MspInit+0xf0>)
 8000aba:	69db      	ldr	r3, [r3, #28]
 8000abc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac4:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <HAL_UART_MspInit+0xf0>)
 8000ac6:	695b      	ldr	r3, [r3, #20]
 8000ac8:	4a10      	ldr	r2, [pc, #64]	; (8000b0c <HAL_UART_MspInit+0xf0>)
 8000aca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ace:	6153      	str	r3, [r2, #20]
 8000ad0:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <HAL_UART_MspInit+0xf0>)
 8000ad2:	695b      	ldr	r3, [r3, #20]
 8000ad4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = serial_bluetooth_tx_Pin|serial_bluetooth_rx_Pin;
 8000adc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aea:	2303      	movs	r3, #3
 8000aec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000aee:	2307      	movs	r3, #7
 8000af0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af2:	f107 031c 	add.w	r3, r7, #28
 8000af6:	4619      	mov	r1, r3
 8000af8:	4806      	ldr	r0, [pc, #24]	; (8000b14 <HAL_UART_MspInit+0xf8>)
 8000afa:	f000 fa6b 	bl	8000fd4 <HAL_GPIO_Init>
}
 8000afe:	bf00      	nop
 8000b00:	3730      	adds	r7, #48	; 0x30
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40004400 	.word	0x40004400
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	40004800 	.word	0x40004800
 8000b14:	48000800 	.word	0x48000800

08000b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <NMI_Handler+0x4>

08000b1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b22:	e7fe      	b.n	8000b22 <HardFault_Handler+0x4>

08000b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <MemManage_Handler+0x4>

08000b2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <BusFault_Handler+0x4>

08000b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <UsageFault_Handler+0x4>

08000b36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b64:	f000 f88e 	bl	8000c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b70:	4802      	ldr	r0, [pc, #8]	; (8000b7c <USART2_IRQHandler+0x10>)
 8000b72:	f003 f8d9 	bl	8003d28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000148 	.word	0x20000148

08000b80 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <SystemInit+0x20>)
 8000b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b8a:	4a05      	ldr	r2, [pc, #20]	; (8000ba0 <SystemInit+0x20>)
 8000b8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ba4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bdc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ba8:	480d      	ldr	r0, [pc, #52]	; (8000be0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000baa:	490e      	ldr	r1, [pc, #56]	; (8000be4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bac:	4a0e      	ldr	r2, [pc, #56]	; (8000be8 <LoopForever+0xe>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb0:	e002      	b.n	8000bb8 <LoopCopyDataInit>

08000bb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb6:	3304      	adds	r3, #4

08000bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bbc:	d3f9      	bcc.n	8000bb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bbe:	4a0b      	ldr	r2, [pc, #44]	; (8000bec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bc0:	4c0b      	ldr	r4, [pc, #44]	; (8000bf0 <LoopForever+0x16>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc4:	e001      	b.n	8000bca <LoopFillZerobss>

08000bc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc8:	3204      	adds	r2, #4

08000bca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bcc:	d3fb      	bcc.n	8000bc6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bce:	f7ff ffd7 	bl	8000b80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bd2:	f003 ffc9 	bl	8004b68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bd6:	f7ff fafd 	bl	80001d4 <main>

08000bda <LoopForever>:

LoopForever:
    b LoopForever
 8000bda:	e7fe      	b.n	8000bda <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bdc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000be0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000be8:	08004c28 	.word	0x08004c28
  ldr r2, =_sbss
 8000bec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bf0:	200001d0 	.word	0x200001d0

08000bf4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bf4:	e7fe      	b.n	8000bf4 <ADC1_2_IRQHandler>
	...

08000bf8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bfc:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <HAL_Init+0x28>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a07      	ldr	r2, [pc, #28]	; (8000c20 <HAL_Init+0x28>)
 8000c02:	f043 0310 	orr.w	r3, r3, #16
 8000c06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c08:	2003      	movs	r0, #3
 8000c0a:	f000 f92b 	bl	8000e64 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f000 f808 	bl	8000c24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c14:	f7ff fe52 	bl	80008bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40022000 	.word	0x40022000

08000c24 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <HAL_InitTick+0x54>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <HAL_InitTick+0x58>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	4619      	mov	r1, r3
 8000c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c42:	4618      	mov	r0, r3
 8000c44:	f000 f943 	bl	8000ece <HAL_SYSTICK_Config>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e00e      	b.n	8000c70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2b0f      	cmp	r3, #15
 8000c56:	d80a      	bhi.n	8000c6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c60:	f000 f90b 	bl	8000e7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c64:	4a06      	ldr	r2, [pc, #24]	; (8000c80 <HAL_InitTick+0x5c>)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e000      	b.n	8000c70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	20000008 	.word	0x20000008
 8000c80:	20000004 	.word	0x20000004

08000c84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_IncTick+0x20>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <HAL_IncTick+0x24>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4413      	add	r3, r2
 8000c94:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <HAL_IncTick+0x24>)
 8000c96:	6013      	str	r3, [r2, #0]
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	20000008 	.word	0x20000008
 8000ca8:	200001cc 	.word	0x200001cc

08000cac <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return uwTick;  
 8000cb0:	4b03      	ldr	r3, [pc, #12]	; (8000cc0 <HAL_GetTick+0x14>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	200001cc 	.word	0x200001cc

08000cc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cda:	68ba      	ldr	r2, [r7, #8]
 8000cdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cf6:	4a04      	ldr	r2, [pc, #16]	; (8000d08 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	60d3      	str	r3, [r2, #12]
}
 8000cfc:	bf00      	nop
 8000cfe:	3714      	adds	r7, #20
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d10:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <__NVIC_GetPriorityGrouping+0x18>)
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	0a1b      	lsrs	r3, r3, #8
 8000d16:	f003 0307 	and.w	r3, r3, #7
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	db0b      	blt.n	8000d52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	f003 021f 	and.w	r2, r3, #31
 8000d40:	4907      	ldr	r1, [pc, #28]	; (8000d60 <__NVIC_EnableIRQ+0x38>)
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	095b      	lsrs	r3, r3, #5
 8000d48:	2001      	movs	r0, #1
 8000d4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d52:	bf00      	nop
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	e000e100 	.word	0xe000e100

08000d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	6039      	str	r1, [r7, #0]
 8000d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	db0a      	blt.n	8000d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	490c      	ldr	r1, [pc, #48]	; (8000db0 <__NVIC_SetPriority+0x4c>)
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	0112      	lsls	r2, r2, #4
 8000d84:	b2d2      	uxtb	r2, r2
 8000d86:	440b      	add	r3, r1
 8000d88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d8c:	e00a      	b.n	8000da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	4908      	ldr	r1, [pc, #32]	; (8000db4 <__NVIC_SetPriority+0x50>)
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	f003 030f 	and.w	r3, r3, #15
 8000d9a:	3b04      	subs	r3, #4
 8000d9c:	0112      	lsls	r2, r2, #4
 8000d9e:	b2d2      	uxtb	r2, r2
 8000da0:	440b      	add	r3, r1
 8000da2:	761a      	strb	r2, [r3, #24]
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000e100 	.word	0xe000e100
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b089      	sub	sp, #36	; 0x24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	f1c3 0307 	rsb	r3, r3, #7
 8000dd2:	2b04      	cmp	r3, #4
 8000dd4:	bf28      	it	cs
 8000dd6:	2304      	movcs	r3, #4
 8000dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	3304      	adds	r3, #4
 8000dde:	2b06      	cmp	r3, #6
 8000de0:	d902      	bls.n	8000de8 <NVIC_EncodePriority+0x30>
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	3b03      	subs	r3, #3
 8000de6:	e000      	b.n	8000dea <NVIC_EncodePriority+0x32>
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	43da      	mvns	r2, r3
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	401a      	ands	r2, r3
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0a:	43d9      	mvns	r1, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e10:	4313      	orrs	r3, r2
         );
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3724      	adds	r7, #36	; 0x24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
	...

08000e20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e30:	d301      	bcc.n	8000e36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e32:	2301      	movs	r3, #1
 8000e34:	e00f      	b.n	8000e56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e36:	4a0a      	ldr	r2, [pc, #40]	; (8000e60 <SysTick_Config+0x40>)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e3e:	210f      	movs	r1, #15
 8000e40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e44:	f7ff ff8e 	bl	8000d64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e48:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <SysTick_Config+0x40>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e4e:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <SysTick_Config+0x40>)
 8000e50:	2207      	movs	r2, #7
 8000e52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	e000e010 	.word	0xe000e010

08000e64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f7ff ff29 	bl	8000cc4 <__NVIC_SetPriorityGrouping>
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b086      	sub	sp, #24
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	4603      	mov	r3, r0
 8000e82:	60b9      	str	r1, [r7, #8]
 8000e84:	607a      	str	r2, [r7, #4]
 8000e86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e8c:	f7ff ff3e 	bl	8000d0c <__NVIC_GetPriorityGrouping>
 8000e90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	68b9      	ldr	r1, [r7, #8]
 8000e96:	6978      	ldr	r0, [r7, #20]
 8000e98:	f7ff ff8e 	bl	8000db8 <NVIC_EncodePriority>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea2:	4611      	mov	r1, r2
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff5d 	bl	8000d64 <__NVIC_SetPriority>
}
 8000eaa:	bf00      	nop
 8000eac:	3718      	adds	r7, #24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	4603      	mov	r3, r0
 8000eba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff ff31 	bl	8000d28 <__NVIC_EnableIRQ>
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b082      	sub	sp, #8
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f7ff ffa2 	bl	8000e20 <SysTick_Config>
 8000edc:	4603      	mov	r3, r0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	b083      	sub	sp, #12
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d008      	beq.n	8000f0a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2204      	movs	r2, #4
 8000efc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e020      	b.n	8000f4c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f022 020e 	bic.w	r2, r2, #14
 8000f18:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f022 0201 	bic.w	r2, r2, #1
 8000f28:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f32:	2101      	movs	r1, #1
 8000f34:	fa01 f202 	lsl.w	r2, r1, r2
 8000f38:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2200      	movs	r2, #0
 8000f46:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000f4a:	2300      	movs	r3, #0
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f60:	2300      	movs	r3, #0
 8000f62:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d005      	beq.n	8000f7a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2204      	movs	r2, #4
 8000f72:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	73fb      	strb	r3, [r7, #15]
 8000f78:	e027      	b.n	8000fca <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f022 020e 	bic.w	r2, r2, #14
 8000f88:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f022 0201 	bic.w	r2, r2, #1
 8000f98:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2201      	movs	r2, #1
 8000fae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	4798      	blx	r3
    } 
  }
  return status;
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b087      	sub	sp, #28
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fe2:	e160      	b.n	80012a6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	2101      	movs	r1, #1
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	f000 8152 	beq.w	80012a0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d00b      	beq.n	800101c <HAL_GPIO_Init+0x48>
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	2b02      	cmp	r3, #2
 800100a:	d007      	beq.n	800101c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001010:	2b11      	cmp	r3, #17
 8001012:	d003      	beq.n	800101c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	2b12      	cmp	r3, #18
 800101a:	d130      	bne.n	800107e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	2203      	movs	r2, #3
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	68da      	ldr	r2, [r3, #12]
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4313      	orrs	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001052:	2201      	movs	r2, #1
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43db      	mvns	r3, r3
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	4013      	ands	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	091b      	lsrs	r3, r3, #4
 8001068:	f003 0201 	and.w	r2, r3, #1
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	2203      	movs	r2, #3
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43db      	mvns	r3, r3
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	4013      	ands	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	689a      	ldr	r2, [r3, #8]
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d003      	beq.n	80010be <HAL_GPIO_Init+0xea>
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	2b12      	cmp	r3, #18
 80010bc:	d123      	bne.n	8001106 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	08da      	lsrs	r2, r3, #3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	3208      	adds	r2, #8
 80010c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	220f      	movs	r2, #15
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43db      	mvns	r3, r3
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	4013      	ands	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	691a      	ldr	r2, [r3, #16]
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	f003 0307 	and.w	r3, r3, #7
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	08da      	lsrs	r2, r3, #3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3208      	adds	r2, #8
 8001100:	6939      	ldr	r1, [r7, #16]
 8001102:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	2203      	movs	r2, #3
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	4013      	ands	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f003 0203 	and.w	r2, r3, #3
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	4313      	orrs	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001142:	2b00      	cmp	r3, #0
 8001144:	f000 80ac 	beq.w	80012a0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001148:	4b5e      	ldr	r3, [pc, #376]	; (80012c4 <HAL_GPIO_Init+0x2f0>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	4a5d      	ldr	r2, [pc, #372]	; (80012c4 <HAL_GPIO_Init+0x2f0>)
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	6193      	str	r3, [r2, #24]
 8001154:	4b5b      	ldr	r3, [pc, #364]	; (80012c4 <HAL_GPIO_Init+0x2f0>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	f003 0301 	and.w	r3, r3, #1
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001160:	4a59      	ldr	r2, [pc, #356]	; (80012c8 <HAL_GPIO_Init+0x2f4>)
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	089b      	lsrs	r3, r3, #2
 8001166:	3302      	adds	r3, #2
 8001168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800116c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	f003 0303 	and.w	r3, r3, #3
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	220f      	movs	r2, #15
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	4013      	ands	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800118a:	d025      	beq.n	80011d8 <HAL_GPIO_Init+0x204>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4a4f      	ldr	r2, [pc, #316]	; (80012cc <HAL_GPIO_Init+0x2f8>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d01f      	beq.n	80011d4 <HAL_GPIO_Init+0x200>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a4e      	ldr	r2, [pc, #312]	; (80012d0 <HAL_GPIO_Init+0x2fc>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d019      	beq.n	80011d0 <HAL_GPIO_Init+0x1fc>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a4d      	ldr	r2, [pc, #308]	; (80012d4 <HAL_GPIO_Init+0x300>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d013      	beq.n	80011cc <HAL_GPIO_Init+0x1f8>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4a4c      	ldr	r2, [pc, #304]	; (80012d8 <HAL_GPIO_Init+0x304>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d00d      	beq.n	80011c8 <HAL_GPIO_Init+0x1f4>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4a4b      	ldr	r2, [pc, #300]	; (80012dc <HAL_GPIO_Init+0x308>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d007      	beq.n	80011c4 <HAL_GPIO_Init+0x1f0>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a4a      	ldr	r2, [pc, #296]	; (80012e0 <HAL_GPIO_Init+0x30c>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d101      	bne.n	80011c0 <HAL_GPIO_Init+0x1ec>
 80011bc:	2306      	movs	r3, #6
 80011be:	e00c      	b.n	80011da <HAL_GPIO_Init+0x206>
 80011c0:	2307      	movs	r3, #7
 80011c2:	e00a      	b.n	80011da <HAL_GPIO_Init+0x206>
 80011c4:	2305      	movs	r3, #5
 80011c6:	e008      	b.n	80011da <HAL_GPIO_Init+0x206>
 80011c8:	2304      	movs	r3, #4
 80011ca:	e006      	b.n	80011da <HAL_GPIO_Init+0x206>
 80011cc:	2303      	movs	r3, #3
 80011ce:	e004      	b.n	80011da <HAL_GPIO_Init+0x206>
 80011d0:	2302      	movs	r3, #2
 80011d2:	e002      	b.n	80011da <HAL_GPIO_Init+0x206>
 80011d4:	2301      	movs	r3, #1
 80011d6:	e000      	b.n	80011da <HAL_GPIO_Init+0x206>
 80011d8:	2300      	movs	r3, #0
 80011da:	697a      	ldr	r2, [r7, #20]
 80011dc:	f002 0203 	and.w	r2, r2, #3
 80011e0:	0092      	lsls	r2, r2, #2
 80011e2:	4093      	lsls	r3, r2
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011ea:	4937      	ldr	r1, [pc, #220]	; (80012c8 <HAL_GPIO_Init+0x2f4>)
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	089b      	lsrs	r3, r3, #2
 80011f0:	3302      	adds	r3, #2
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011f8:	4b3a      	ldr	r3, [pc, #232]	; (80012e4 <HAL_GPIO_Init+0x310>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	43db      	mvns	r3, r3
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	4013      	ands	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d003      	beq.n	800121c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	4313      	orrs	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800121c:	4a31      	ldr	r2, [pc, #196]	; (80012e4 <HAL_GPIO_Init+0x310>)
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001222:	4b30      	ldr	r3, [pc, #192]	; (80012e4 <HAL_GPIO_Init+0x310>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	43db      	mvns	r3, r3
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	4013      	ands	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d003      	beq.n	8001246 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4313      	orrs	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001246:	4a27      	ldr	r2, [pc, #156]	; (80012e4 <HAL_GPIO_Init+0x310>)
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800124c:	4b25      	ldr	r3, [pc, #148]	; (80012e4 <HAL_GPIO_Init+0x310>)
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	43db      	mvns	r3, r3
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	4013      	ands	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d003      	beq.n	8001270 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	4313      	orrs	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001270:	4a1c      	ldr	r2, [pc, #112]	; (80012e4 <HAL_GPIO_Init+0x310>)
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001276:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <HAL_GPIO_Init+0x310>)
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	43db      	mvns	r3, r3
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	4013      	ands	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4313      	orrs	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800129a:	4a12      	ldr	r2, [pc, #72]	; (80012e4 <HAL_GPIO_Init+0x310>)
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	3301      	adds	r3, #1
 80012a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	fa22 f303 	lsr.w	r3, r2, r3
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f47f ae97 	bne.w	8000fe4 <HAL_GPIO_Init+0x10>
  }
}
 80012b6:	bf00      	nop
 80012b8:	371c      	adds	r7, #28
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	40021000 	.word	0x40021000
 80012c8:	40010000 	.word	0x40010000
 80012cc:	48000400 	.word	0x48000400
 80012d0:	48000800 	.word	0x48000800
 80012d4:	48000c00 	.word	0x48000c00
 80012d8:	48001000 	.word	0x48001000
 80012dc:	48001400 	.word	0x48001400
 80012e0:	48001800 	.word	0x48001800
 80012e4:	40010400 	.word	0x40010400

080012e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	460b      	mov	r3, r1
 80012f2:	807b      	strh	r3, [r7, #2]
 80012f4:	4613      	mov	r3, r2
 80012f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012f8:	787b      	ldrb	r3, [r7, #1]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d003      	beq.n	8001306 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012fe:	887a      	ldrh	r2, [r7, #2]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001304:	e002      	b.n	800130c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001306:	887a      	ldrh	r2, [r7, #2]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800131e:	af00      	add	r7, sp, #0
 8001320:	1d3b      	adds	r3, r7, #4
 8001322:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d102      	bne.n	8001332 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	f000 bf01 	b.w	8002134 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	2b00      	cmp	r3, #0
 800133e:	f000 8160 	beq.w	8001602 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001342:	4bae      	ldr	r3, [pc, #696]	; (80015fc <HAL_RCC_OscConfig+0x2e4>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f003 030c 	and.w	r3, r3, #12
 800134a:	2b04      	cmp	r3, #4
 800134c:	d00c      	beq.n	8001368 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800134e:	4bab      	ldr	r3, [pc, #684]	; (80015fc <HAL_RCC_OscConfig+0x2e4>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f003 030c 	and.w	r3, r3, #12
 8001356:	2b08      	cmp	r3, #8
 8001358:	d159      	bne.n	800140e <HAL_RCC_OscConfig+0xf6>
 800135a:	4ba8      	ldr	r3, [pc, #672]	; (80015fc <HAL_RCC_OscConfig+0x2e4>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001366:	d152      	bne.n	800140e <HAL_RCC_OscConfig+0xf6>
 8001368:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800136c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001370:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001374:	fa93 f3a3 	rbit	r3, r3
 8001378:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800137c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001380:	fab3 f383 	clz	r3, r3
 8001384:	b2db      	uxtb	r3, r3
 8001386:	095b      	lsrs	r3, r3, #5
 8001388:	b2db      	uxtb	r3, r3
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	b2db      	uxtb	r3, r3
 8001390:	2b01      	cmp	r3, #1
 8001392:	d102      	bne.n	800139a <HAL_RCC_OscConfig+0x82>
 8001394:	4b99      	ldr	r3, [pc, #612]	; (80015fc <HAL_RCC_OscConfig+0x2e4>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	e015      	b.n	80013c6 <HAL_RCC_OscConfig+0xae>
 800139a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800139e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80013a6:	fa93 f3a3 	rbit	r3, r3
 80013aa:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80013ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013b2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80013b6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80013ba:	fa93 f3a3 	rbit	r3, r3
 80013be:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80013c2:	4b8e      	ldr	r3, [pc, #568]	; (80015fc <HAL_RCC_OscConfig+0x2e4>)
 80013c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013ca:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80013ce:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80013d2:	fa92 f2a2 	rbit	r2, r2
 80013d6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80013da:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80013de:	fab2 f282 	clz	r2, r2
 80013e2:	b2d2      	uxtb	r2, r2
 80013e4:	f042 0220 	orr.w	r2, r2, #32
 80013e8:	b2d2      	uxtb	r2, r2
 80013ea:	f002 021f 	and.w	r2, r2, #31
 80013ee:	2101      	movs	r1, #1
 80013f0:	fa01 f202 	lsl.w	r2, r1, r2
 80013f4:	4013      	ands	r3, r2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f000 8102 	beq.w	8001600 <HAL_RCC_OscConfig+0x2e8>
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	f040 80fc 	bne.w	8001600 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	f000 be93 	b.w	8002134 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001418:	d106      	bne.n	8001428 <HAL_RCC_OscConfig+0x110>
 800141a:	4b78      	ldr	r3, [pc, #480]	; (80015fc <HAL_RCC_OscConfig+0x2e4>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a77      	ldr	r2, [pc, #476]	; (80015fc <HAL_RCC_OscConfig+0x2e4>)
 8001420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001424:	6013      	str	r3, [r2, #0]
 8001426:	e030      	b.n	800148a <HAL_RCC_OscConfig+0x172>
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d10c      	bne.n	800144c <HAL_RCC_OscConfig+0x134>
 8001432:	4b72      	ldr	r3, [pc, #456]	; (80015fc <HAL_RCC_OscConfig+0x2e4>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a71      	ldr	r2, [pc, #452]	; (80015fc <HAL_RCC_OscConfig+0x2e4>)
 8001438:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	4b6f      	ldr	r3, [pc, #444]	; (80015fc <HAL_RCC_OscConfig+0x2e4>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a6e      	ldr	r2, [pc, #440]	; (80015fc <HAL_RCC_OscConfig+0x2e4>)
 8001444:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	e01e      	b.n	800148a <HAL_RCC_OscConfig+0x172>
 800144c:	1d3b      	adds	r3, r7, #4
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001456:	d10c      	bne.n	8001472 <HAL_RCC_OscConfig+0x15a>
 8001458:	4b68      	ldr	r3, [pc, #416]	; (80015fc <HAL_RCC_OscConfig+0x2e4>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a67      	ldr	r2, [pc, #412]	; (80015fc <HAL_RCC_OscConfig+0x2e4>)
 800145e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001462:	6013      	str	r3, [r2, #0]
 8001464:	4b65      	ldr	r3, [pc, #404]	; (80015fc <HAL_RCC_OscConfig+0x2e4>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a64      	ldr	r2, [pc, #400]	; (80015fc <HAL_RCC_OscConfig+0x2e4>)
 800146a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800146e:	6013      	str	r3, [r2, #0]
 8001470:	e00b      	b.n	800148a <HAL_RCC_OscConfig+0x172>
 8001472:	4b62      	ldr	r3, [pc, #392]	; (80015fc <HAL_RCC_OscConfig+0x2e4>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a61      	ldr	r2, [pc, #388]	; (80015fc <HAL_RCC_OscConfig+0x2e4>)
 8001478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	4b5f      	ldr	r3, [pc, #380]	; (80015fc <HAL_RCC_OscConfig+0x2e4>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a5e      	ldr	r2, [pc, #376]	; (80015fc <HAL_RCC_OscConfig+0x2e4>)
 8001484:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001488:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d059      	beq.n	8001548 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001494:	f7ff fc0a 	bl	8000cac <HAL_GetTick>
 8001498:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800149c:	e00a      	b.n	80014b4 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800149e:	f7ff fc05 	bl	8000cac <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b64      	cmp	r3, #100	; 0x64
 80014ac:	d902      	bls.n	80014b4 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	f000 be40 	b.w	8002134 <HAL_RCC_OscConfig+0xe1c>
 80014b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014b8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014bc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80014c0:	fa93 f3a3 	rbit	r3, r3
 80014c4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80014c8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014cc:	fab3 f383 	clz	r3, r3
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	095b      	lsrs	r3, r3, #5
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d102      	bne.n	80014e6 <HAL_RCC_OscConfig+0x1ce>
 80014e0:	4b46      	ldr	r3, [pc, #280]	; (80015fc <HAL_RCC_OscConfig+0x2e4>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	e015      	b.n	8001512 <HAL_RCC_OscConfig+0x1fa>
 80014e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014ea:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ee:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80014f2:	fa93 f3a3 	rbit	r3, r3
 80014f6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80014fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014fe:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001502:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001506:	fa93 f3a3 	rbit	r3, r3
 800150a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800150e:	4b3b      	ldr	r3, [pc, #236]	; (80015fc <HAL_RCC_OscConfig+0x2e4>)
 8001510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001512:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001516:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800151a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800151e:	fa92 f2a2 	rbit	r2, r2
 8001522:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001526:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800152a:	fab2 f282 	clz	r2, r2
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	f042 0220 	orr.w	r2, r2, #32
 8001534:	b2d2      	uxtb	r2, r2
 8001536:	f002 021f 	and.w	r2, r2, #31
 800153a:	2101      	movs	r1, #1
 800153c:	fa01 f202 	lsl.w	r2, r1, r2
 8001540:	4013      	ands	r3, r2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d0ab      	beq.n	800149e <HAL_RCC_OscConfig+0x186>
 8001546:	e05c      	b.n	8001602 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001548:	f7ff fbb0 	bl	8000cac <HAL_GetTick>
 800154c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001550:	e00a      	b.n	8001568 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001552:	f7ff fbab 	bl	8000cac <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b64      	cmp	r3, #100	; 0x64
 8001560:	d902      	bls.n	8001568 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	f000 bde6 	b.w	8002134 <HAL_RCC_OscConfig+0xe1c>
 8001568:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800156c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001570:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001574:	fa93 f3a3 	rbit	r3, r3
 8001578:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800157c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001580:	fab3 f383 	clz	r3, r3
 8001584:	b2db      	uxtb	r3, r3
 8001586:	095b      	lsrs	r3, r3, #5
 8001588:	b2db      	uxtb	r3, r3
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	b2db      	uxtb	r3, r3
 8001590:	2b01      	cmp	r3, #1
 8001592:	d102      	bne.n	800159a <HAL_RCC_OscConfig+0x282>
 8001594:	4b19      	ldr	r3, [pc, #100]	; (80015fc <HAL_RCC_OscConfig+0x2e4>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	e015      	b.n	80015c6 <HAL_RCC_OscConfig+0x2ae>
 800159a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800159e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80015a6:	fa93 f3a3 	rbit	r3, r3
 80015aa:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80015ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015b2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80015b6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80015ba:	fa93 f3a3 	rbit	r3, r3
 80015be:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <HAL_RCC_OscConfig+0x2e4>)
 80015c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015ca:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80015ce:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80015d2:	fa92 f2a2 	rbit	r2, r2
 80015d6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80015da:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80015de:	fab2 f282 	clz	r2, r2
 80015e2:	b2d2      	uxtb	r2, r2
 80015e4:	f042 0220 	orr.w	r2, r2, #32
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	f002 021f 	and.w	r2, r2, #31
 80015ee:	2101      	movs	r1, #1
 80015f0:	fa01 f202 	lsl.w	r2, r1, r2
 80015f4:	4013      	ands	r3, r2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1ab      	bne.n	8001552 <HAL_RCC_OscConfig+0x23a>
 80015fa:	e002      	b.n	8001602 <HAL_RCC_OscConfig+0x2ea>
 80015fc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	f000 8170 	beq.w	80018f2 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001612:	4bd0      	ldr	r3, [pc, #832]	; (8001954 <HAL_RCC_OscConfig+0x63c>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f003 030c 	and.w	r3, r3, #12
 800161a:	2b00      	cmp	r3, #0
 800161c:	d00c      	beq.n	8001638 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800161e:	4bcd      	ldr	r3, [pc, #820]	; (8001954 <HAL_RCC_OscConfig+0x63c>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f003 030c 	and.w	r3, r3, #12
 8001626:	2b08      	cmp	r3, #8
 8001628:	d16d      	bne.n	8001706 <HAL_RCC_OscConfig+0x3ee>
 800162a:	4bca      	ldr	r3, [pc, #808]	; (8001954 <HAL_RCC_OscConfig+0x63c>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001632:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001636:	d166      	bne.n	8001706 <HAL_RCC_OscConfig+0x3ee>
 8001638:	2302      	movs	r3, #2
 800163a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001642:	fa93 f3a3 	rbit	r3, r3
 8001646:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800164a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800164e:	fab3 f383 	clz	r3, r3
 8001652:	b2db      	uxtb	r3, r3
 8001654:	095b      	lsrs	r3, r3, #5
 8001656:	b2db      	uxtb	r3, r3
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b01      	cmp	r3, #1
 8001660:	d102      	bne.n	8001668 <HAL_RCC_OscConfig+0x350>
 8001662:	4bbc      	ldr	r3, [pc, #752]	; (8001954 <HAL_RCC_OscConfig+0x63c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	e013      	b.n	8001690 <HAL_RCC_OscConfig+0x378>
 8001668:	2302      	movs	r3, #2
 800166a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800166e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001672:	fa93 f3a3 	rbit	r3, r3
 8001676:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800167a:	2302      	movs	r3, #2
 800167c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001680:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001684:	fa93 f3a3 	rbit	r3, r3
 8001688:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800168c:	4bb1      	ldr	r3, [pc, #708]	; (8001954 <HAL_RCC_OscConfig+0x63c>)
 800168e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001690:	2202      	movs	r2, #2
 8001692:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001696:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800169a:	fa92 f2a2 	rbit	r2, r2
 800169e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80016a2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80016a6:	fab2 f282 	clz	r2, r2
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	f042 0220 	orr.w	r2, r2, #32
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	f002 021f 	and.w	r2, r2, #31
 80016b6:	2101      	movs	r1, #1
 80016b8:	fa01 f202 	lsl.w	r2, r1, r2
 80016bc:	4013      	ands	r3, r2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d007      	beq.n	80016d2 <HAL_RCC_OscConfig+0x3ba>
 80016c2:	1d3b      	adds	r3, r7, #4
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d002      	beq.n	80016d2 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	f000 bd31 	b.w	8002134 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d2:	4ba0      	ldr	r3, [pc, #640]	; (8001954 <HAL_RCC_OscConfig+0x63c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	21f8      	movs	r1, #248	; 0xf8
 80016e2:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e6:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80016ea:	fa91 f1a1 	rbit	r1, r1
 80016ee:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80016f2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80016f6:	fab1 f181 	clz	r1, r1
 80016fa:	b2c9      	uxtb	r1, r1
 80016fc:	408b      	lsls	r3, r1
 80016fe:	4995      	ldr	r1, [pc, #596]	; (8001954 <HAL_RCC_OscConfig+0x63c>)
 8001700:	4313      	orrs	r3, r2
 8001702:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001704:	e0f5      	b.n	80018f2 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001706:	1d3b      	adds	r3, r7, #4
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	2b00      	cmp	r3, #0
 800170e:	f000 8085 	beq.w	800181c <HAL_RCC_OscConfig+0x504>
 8001712:	2301      	movs	r3, #1
 8001714:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001718:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800171c:	fa93 f3a3 	rbit	r3, r3
 8001720:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001724:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001728:	fab3 f383 	clz	r3, r3
 800172c:	b2db      	uxtb	r3, r3
 800172e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001732:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	461a      	mov	r2, r3
 800173a:	2301      	movs	r3, #1
 800173c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173e:	f7ff fab5 	bl	8000cac <HAL_GetTick>
 8001742:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001746:	e00a      	b.n	800175e <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001748:	f7ff fab0 	bl	8000cac <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d902      	bls.n	800175e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	f000 bceb 	b.w	8002134 <HAL_RCC_OscConfig+0xe1c>
 800175e:	2302      	movs	r3, #2
 8001760:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001764:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001768:	fa93 f3a3 	rbit	r3, r3
 800176c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001770:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001774:	fab3 f383 	clz	r3, r3
 8001778:	b2db      	uxtb	r3, r3
 800177a:	095b      	lsrs	r3, r3, #5
 800177c:	b2db      	uxtb	r3, r3
 800177e:	f043 0301 	orr.w	r3, r3, #1
 8001782:	b2db      	uxtb	r3, r3
 8001784:	2b01      	cmp	r3, #1
 8001786:	d102      	bne.n	800178e <HAL_RCC_OscConfig+0x476>
 8001788:	4b72      	ldr	r3, [pc, #456]	; (8001954 <HAL_RCC_OscConfig+0x63c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	e013      	b.n	80017b6 <HAL_RCC_OscConfig+0x49e>
 800178e:	2302      	movs	r3, #2
 8001790:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001794:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001798:	fa93 f3a3 	rbit	r3, r3
 800179c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80017a0:	2302      	movs	r3, #2
 80017a2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80017a6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80017aa:	fa93 f3a3 	rbit	r3, r3
 80017ae:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80017b2:	4b68      	ldr	r3, [pc, #416]	; (8001954 <HAL_RCC_OscConfig+0x63c>)
 80017b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b6:	2202      	movs	r2, #2
 80017b8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80017bc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80017c0:	fa92 f2a2 	rbit	r2, r2
 80017c4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80017c8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80017cc:	fab2 f282 	clz	r2, r2
 80017d0:	b2d2      	uxtb	r2, r2
 80017d2:	f042 0220 	orr.w	r2, r2, #32
 80017d6:	b2d2      	uxtb	r2, r2
 80017d8:	f002 021f 	and.w	r2, r2, #31
 80017dc:	2101      	movs	r1, #1
 80017de:	fa01 f202 	lsl.w	r2, r1, r2
 80017e2:	4013      	ands	r3, r2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0af      	beq.n	8001748 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e8:	4b5a      	ldr	r3, [pc, #360]	; (8001954 <HAL_RCC_OscConfig+0x63c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017f0:	1d3b      	adds	r3, r7, #4
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	21f8      	movs	r1, #248	; 0xf8
 80017f8:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fc:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001800:	fa91 f1a1 	rbit	r1, r1
 8001804:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001808:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800180c:	fab1 f181 	clz	r1, r1
 8001810:	b2c9      	uxtb	r1, r1
 8001812:	408b      	lsls	r3, r1
 8001814:	494f      	ldr	r1, [pc, #316]	; (8001954 <HAL_RCC_OscConfig+0x63c>)
 8001816:	4313      	orrs	r3, r2
 8001818:	600b      	str	r3, [r1, #0]
 800181a:	e06a      	b.n	80018f2 <HAL_RCC_OscConfig+0x5da>
 800181c:	2301      	movs	r3, #1
 800181e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001822:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001826:	fa93 f3a3 	rbit	r3, r3
 800182a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800182e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001832:	fab3 f383 	clz	r3, r3
 8001836:	b2db      	uxtb	r3, r3
 8001838:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800183c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	461a      	mov	r2, r3
 8001844:	2300      	movs	r3, #0
 8001846:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001848:	f7ff fa30 	bl	8000cac <HAL_GetTick>
 800184c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001850:	e00a      	b.n	8001868 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001852:	f7ff fa2b 	bl	8000cac <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d902      	bls.n	8001868 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	f000 bc66 	b.w	8002134 <HAL_RCC_OscConfig+0xe1c>
 8001868:	2302      	movs	r3, #2
 800186a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001872:	fa93 f3a3 	rbit	r3, r3
 8001876:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800187a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800187e:	fab3 f383 	clz	r3, r3
 8001882:	b2db      	uxtb	r3, r3
 8001884:	095b      	lsrs	r3, r3, #5
 8001886:	b2db      	uxtb	r3, r3
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b01      	cmp	r3, #1
 8001890:	d102      	bne.n	8001898 <HAL_RCC_OscConfig+0x580>
 8001892:	4b30      	ldr	r3, [pc, #192]	; (8001954 <HAL_RCC_OscConfig+0x63c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	e013      	b.n	80018c0 <HAL_RCC_OscConfig+0x5a8>
 8001898:	2302      	movs	r3, #2
 800189a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80018a2:	fa93 f3a3 	rbit	r3, r3
 80018a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80018aa:	2302      	movs	r3, #2
 80018ac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80018b0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80018b4:	fa93 f3a3 	rbit	r3, r3
 80018b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80018bc:	4b25      	ldr	r3, [pc, #148]	; (8001954 <HAL_RCC_OscConfig+0x63c>)
 80018be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c0:	2202      	movs	r2, #2
 80018c2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80018c6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80018ca:	fa92 f2a2 	rbit	r2, r2
 80018ce:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80018d2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80018d6:	fab2 f282 	clz	r2, r2
 80018da:	b2d2      	uxtb	r2, r2
 80018dc:	f042 0220 	orr.w	r2, r2, #32
 80018e0:	b2d2      	uxtb	r2, r2
 80018e2:	f002 021f 	and.w	r2, r2, #31
 80018e6:	2101      	movs	r1, #1
 80018e8:	fa01 f202 	lsl.w	r2, r1, r2
 80018ec:	4013      	ands	r3, r2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1af      	bne.n	8001852 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018f2:	1d3b      	adds	r3, r7, #4
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0308 	and.w	r3, r3, #8
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f000 80da 	beq.w	8001ab6 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001902:	1d3b      	adds	r3, r7, #4
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	695b      	ldr	r3, [r3, #20]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d069      	beq.n	80019e0 <HAL_RCC_OscConfig+0x6c8>
 800190c:	2301      	movs	r3, #1
 800190e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001912:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001916:	fa93 f3a3 	rbit	r3, r3
 800191a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800191e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001922:	fab3 f383 	clz	r3, r3
 8001926:	b2db      	uxtb	r3, r3
 8001928:	461a      	mov	r2, r3
 800192a:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <HAL_RCC_OscConfig+0x640>)
 800192c:	4413      	add	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	461a      	mov	r2, r3
 8001932:	2301      	movs	r3, #1
 8001934:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001936:	f7ff f9b9 	bl	8000cac <HAL_GetTick>
 800193a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800193e:	e00d      	b.n	800195c <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001940:	f7ff f9b4 	bl	8000cac <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d905      	bls.n	800195c <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e3ef      	b.n	8002134 <HAL_RCC_OscConfig+0xe1c>
 8001954:	40021000 	.word	0x40021000
 8001958:	10908120 	.word	0x10908120
 800195c:	2302      	movs	r3, #2
 800195e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001962:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001966:	fa93 f2a3 	rbit	r2, r3
 800196a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001974:	2202      	movs	r2, #2
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	fa93 f2a3 	rbit	r2, r3
 8001982:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800198c:	2202      	movs	r2, #2
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	fa93 f2a3 	rbit	r2, r3
 800199a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800199e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019a0:	4ba4      	ldr	r3, [pc, #656]	; (8001c34 <HAL_RCC_OscConfig+0x91c>)
 80019a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019a4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80019a8:	2102      	movs	r1, #2
 80019aa:	6019      	str	r1, [r3, #0]
 80019ac:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	fa93 f1a3 	rbit	r1, r3
 80019b6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80019ba:	6019      	str	r1, [r3, #0]
  return result;
 80019bc:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	fab3 f383 	clz	r3, r3
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	f003 031f 	and.w	r3, r3, #31
 80019d2:	2101      	movs	r1, #1
 80019d4:	fa01 f303 	lsl.w	r3, r1, r3
 80019d8:	4013      	ands	r3, r2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d0b0      	beq.n	8001940 <HAL_RCC_OscConfig+0x628>
 80019de:	e06a      	b.n	8001ab6 <HAL_RCC_OscConfig+0x79e>
 80019e0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80019e4:	2201      	movs	r2, #1
 80019e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	fa93 f2a3 	rbit	r2, r3
 80019f2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80019f6:	601a      	str	r2, [r3, #0]
  return result;
 80019f8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80019fc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019fe:	fab3 f383 	clz	r3, r3
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	461a      	mov	r2, r3
 8001a06:	4b8c      	ldr	r3, [pc, #560]	; (8001c38 <HAL_RCC_OscConfig+0x920>)
 8001a08:	4413      	add	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	2300      	movs	r3, #0
 8001a10:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a12:	f7ff f94b 	bl	8000cac <HAL_GetTick>
 8001a16:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a1a:	e009      	b.n	8001a30 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a1c:	f7ff f946 	bl	8000cac <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e381      	b.n	8002134 <HAL_RCC_OscConfig+0xe1c>
 8001a30:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a34:	2202      	movs	r2, #2
 8001a36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a38:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	fa93 f2a3 	rbit	r2, r3
 8001a42:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	fa93 f2a3 	rbit	r2, r3
 8001a5a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a64:	2202      	movs	r2, #2
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	fa93 f2a3 	rbit	r2, r3
 8001a72:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001a76:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a78:	4b6e      	ldr	r3, [pc, #440]	; (8001c34 <HAL_RCC_OscConfig+0x91c>)
 8001a7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a7c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a80:	2102      	movs	r1, #2
 8001a82:	6019      	str	r1, [r3, #0]
 8001a84:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	fa93 f1a3 	rbit	r1, r3
 8001a8e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001a92:	6019      	str	r1, [r3, #0]
  return result;
 8001a94:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	fab3 f383 	clz	r3, r3
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	f003 031f 	and.w	r3, r3, #31
 8001aaa:	2101      	movs	r1, #1
 8001aac:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1b2      	bne.n	8001a1c <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ab6:	1d3b      	adds	r3, r7, #4
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f000 8157 	beq.w	8001d74 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001acc:	4b59      	ldr	r3, [pc, #356]	; (8001c34 <HAL_RCC_OscConfig+0x91c>)
 8001ace:	69db      	ldr	r3, [r3, #28]
 8001ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d112      	bne.n	8001afe <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ad8:	4b56      	ldr	r3, [pc, #344]	; (8001c34 <HAL_RCC_OscConfig+0x91c>)
 8001ada:	69db      	ldr	r3, [r3, #28]
 8001adc:	4a55      	ldr	r2, [pc, #340]	; (8001c34 <HAL_RCC_OscConfig+0x91c>)
 8001ade:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae2:	61d3      	str	r3, [r2, #28]
 8001ae4:	4b53      	ldr	r3, [pc, #332]	; (8001c34 <HAL_RCC_OscConfig+0x91c>)
 8001ae6:	69db      	ldr	r3, [r3, #28]
 8001ae8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001aec:	f107 030c 	add.w	r3, r7, #12
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	f107 030c 	add.w	r3, r7, #12
 8001af6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001af8:	2301      	movs	r3, #1
 8001afa:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afe:	4b4f      	ldr	r3, [pc, #316]	; (8001c3c <HAL_RCC_OscConfig+0x924>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d11a      	bne.n	8001b40 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b0a:	4b4c      	ldr	r3, [pc, #304]	; (8001c3c <HAL_RCC_OscConfig+0x924>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a4b      	ldr	r2, [pc, #300]	; (8001c3c <HAL_RCC_OscConfig+0x924>)
 8001b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b14:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b16:	f7ff f8c9 	bl	8000cac <HAL_GetTick>
 8001b1a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1e:	e009      	b.n	8001b34 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b20:	f7ff f8c4 	bl	8000cac <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b64      	cmp	r3, #100	; 0x64
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e2ff      	b.n	8002134 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b34:	4b41      	ldr	r3, [pc, #260]	; (8001c3c <HAL_RCC_OscConfig+0x924>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0ef      	beq.n	8001b20 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b40:	1d3b      	adds	r3, r7, #4
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d106      	bne.n	8001b58 <HAL_RCC_OscConfig+0x840>
 8001b4a:	4b3a      	ldr	r3, [pc, #232]	; (8001c34 <HAL_RCC_OscConfig+0x91c>)
 8001b4c:	6a1b      	ldr	r3, [r3, #32]
 8001b4e:	4a39      	ldr	r2, [pc, #228]	; (8001c34 <HAL_RCC_OscConfig+0x91c>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	6213      	str	r3, [r2, #32]
 8001b56:	e02f      	b.n	8001bb8 <HAL_RCC_OscConfig+0x8a0>
 8001b58:	1d3b      	adds	r3, r7, #4
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10c      	bne.n	8001b7c <HAL_RCC_OscConfig+0x864>
 8001b62:	4b34      	ldr	r3, [pc, #208]	; (8001c34 <HAL_RCC_OscConfig+0x91c>)
 8001b64:	6a1b      	ldr	r3, [r3, #32]
 8001b66:	4a33      	ldr	r2, [pc, #204]	; (8001c34 <HAL_RCC_OscConfig+0x91c>)
 8001b68:	f023 0301 	bic.w	r3, r3, #1
 8001b6c:	6213      	str	r3, [r2, #32]
 8001b6e:	4b31      	ldr	r3, [pc, #196]	; (8001c34 <HAL_RCC_OscConfig+0x91c>)
 8001b70:	6a1b      	ldr	r3, [r3, #32]
 8001b72:	4a30      	ldr	r2, [pc, #192]	; (8001c34 <HAL_RCC_OscConfig+0x91c>)
 8001b74:	f023 0304 	bic.w	r3, r3, #4
 8001b78:	6213      	str	r3, [r2, #32]
 8001b7a:	e01d      	b.n	8001bb8 <HAL_RCC_OscConfig+0x8a0>
 8001b7c:	1d3b      	adds	r3, r7, #4
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	2b05      	cmp	r3, #5
 8001b84:	d10c      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x888>
 8001b86:	4b2b      	ldr	r3, [pc, #172]	; (8001c34 <HAL_RCC_OscConfig+0x91c>)
 8001b88:	6a1b      	ldr	r3, [r3, #32]
 8001b8a:	4a2a      	ldr	r2, [pc, #168]	; (8001c34 <HAL_RCC_OscConfig+0x91c>)
 8001b8c:	f043 0304 	orr.w	r3, r3, #4
 8001b90:	6213      	str	r3, [r2, #32]
 8001b92:	4b28      	ldr	r3, [pc, #160]	; (8001c34 <HAL_RCC_OscConfig+0x91c>)
 8001b94:	6a1b      	ldr	r3, [r3, #32]
 8001b96:	4a27      	ldr	r2, [pc, #156]	; (8001c34 <HAL_RCC_OscConfig+0x91c>)
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	6213      	str	r3, [r2, #32]
 8001b9e:	e00b      	b.n	8001bb8 <HAL_RCC_OscConfig+0x8a0>
 8001ba0:	4b24      	ldr	r3, [pc, #144]	; (8001c34 <HAL_RCC_OscConfig+0x91c>)
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	4a23      	ldr	r2, [pc, #140]	; (8001c34 <HAL_RCC_OscConfig+0x91c>)
 8001ba6:	f023 0301 	bic.w	r3, r3, #1
 8001baa:	6213      	str	r3, [r2, #32]
 8001bac:	4b21      	ldr	r3, [pc, #132]	; (8001c34 <HAL_RCC_OscConfig+0x91c>)
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	4a20      	ldr	r2, [pc, #128]	; (8001c34 <HAL_RCC_OscConfig+0x91c>)
 8001bb2:	f023 0304 	bic.w	r3, r3, #4
 8001bb6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bb8:	1d3b      	adds	r3, r7, #4
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d06a      	beq.n	8001c98 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc2:	f7ff f873 	bl	8000cac <HAL_GetTick>
 8001bc6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bca:	e00b      	b.n	8001be4 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bcc:	f7ff f86e 	bl	8000cac <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e2a7      	b.n	8002134 <HAL_RCC_OscConfig+0xe1c>
 8001be4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001be8:	2202      	movs	r2, #2
 8001bea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bec:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	fa93 f2a3 	rbit	r2, r3
 8001bf6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001c00:	2202      	movs	r2, #2
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	fa93 f2a3 	rbit	r2, r3
 8001c0e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001c12:	601a      	str	r2, [r3, #0]
  return result;
 8001c14:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001c18:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c1a:	fab3 f383 	clz	r3, r3
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	095b      	lsrs	r3, r3, #5
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	f043 0302 	orr.w	r3, r3, #2
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d108      	bne.n	8001c40 <HAL_RCC_OscConfig+0x928>
 8001c2e:	4b01      	ldr	r3, [pc, #4]	; (8001c34 <HAL_RCC_OscConfig+0x91c>)
 8001c30:	6a1b      	ldr	r3, [r3, #32]
 8001c32:	e013      	b.n	8001c5c <HAL_RCC_OscConfig+0x944>
 8001c34:	40021000 	.word	0x40021000
 8001c38:	10908120 	.word	0x10908120
 8001c3c:	40007000 	.word	0x40007000
 8001c40:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c44:	2202      	movs	r2, #2
 8001c46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c48:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	fa93 f2a3 	rbit	r2, r3
 8001c52:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	4bc0      	ldr	r3, [pc, #768]	; (8001f5c <HAL_RCC_OscConfig+0xc44>)
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001c60:	2102      	movs	r1, #2
 8001c62:	6011      	str	r1, [r2, #0]
 8001c64:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001c68:	6812      	ldr	r2, [r2, #0]
 8001c6a:	fa92 f1a2 	rbit	r1, r2
 8001c6e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001c72:	6011      	str	r1, [r2, #0]
  return result;
 8001c74:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001c78:	6812      	ldr	r2, [r2, #0]
 8001c7a:	fab2 f282 	clz	r2, r2
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c84:	b2d2      	uxtb	r2, r2
 8001c86:	f002 021f 	and.w	r2, r2, #31
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c90:	4013      	ands	r3, r2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d09a      	beq.n	8001bcc <HAL_RCC_OscConfig+0x8b4>
 8001c96:	e063      	b.n	8001d60 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c98:	f7ff f808 	bl	8000cac <HAL_GetTick>
 8001c9c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ca0:	e00b      	b.n	8001cba <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ca2:	f7ff f803 	bl	8000cac <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e23c      	b.n	8002134 <HAL_RCC_OscConfig+0xe1c>
 8001cba:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	fa93 f2a3 	rbit	r2, r3
 8001ccc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	fa93 f2a3 	rbit	r2, r3
 8001ce4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001ce8:	601a      	str	r2, [r3, #0]
  return result;
 8001cea:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001cee:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf0:	fab3 f383 	clz	r3, r3
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	095b      	lsrs	r3, r3, #5
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	f043 0302 	orr.w	r3, r3, #2
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d102      	bne.n	8001d0a <HAL_RCC_OscConfig+0x9f2>
 8001d04:	4b95      	ldr	r3, [pc, #596]	; (8001f5c <HAL_RCC_OscConfig+0xc44>)
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	e00d      	b.n	8001d26 <HAL_RCC_OscConfig+0xa0e>
 8001d0a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d0e:	2202      	movs	r2, #2
 8001d10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d12:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	fa93 f2a3 	rbit	r2, r3
 8001d1c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	4b8e      	ldr	r3, [pc, #568]	; (8001f5c <HAL_RCC_OscConfig+0xc44>)
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001d2a:	2102      	movs	r1, #2
 8001d2c:	6011      	str	r1, [r2, #0]
 8001d2e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	fa92 f1a2 	rbit	r1, r2
 8001d38:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001d3c:	6011      	str	r1, [r2, #0]
  return result;
 8001d3e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001d42:	6812      	ldr	r2, [r2, #0]
 8001d44:	fab2 f282 	clz	r2, r2
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	f002 021f 	and.w	r2, r2, #31
 8001d54:	2101      	movs	r1, #1
 8001d56:	fa01 f202 	lsl.w	r2, r1, r2
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1a0      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d60:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d105      	bne.n	8001d74 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d68:	4b7c      	ldr	r3, [pc, #496]	; (8001f5c <HAL_RCC_OscConfig+0xc44>)
 8001d6a:	69db      	ldr	r3, [r3, #28]
 8001d6c:	4a7b      	ldr	r2, [pc, #492]	; (8001f5c <HAL_RCC_OscConfig+0xc44>)
 8001d6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d72:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d74:	1d3b      	adds	r3, r7, #4
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 81d9 	beq.w	8002132 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d80:	4b76      	ldr	r3, [pc, #472]	; (8001f5c <HAL_RCC_OscConfig+0xc44>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 030c 	and.w	r3, r3, #12
 8001d88:	2b08      	cmp	r3, #8
 8001d8a:	f000 81a6 	beq.w	80020da <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d8e:	1d3b      	adds	r3, r7, #4
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	f040 811e 	bne.w	8001fd6 <HAL_RCC_OscConfig+0xcbe>
 8001d9a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001d9e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001da2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	fa93 f2a3 	rbit	r2, r3
 8001dae:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001db2:	601a      	str	r2, [r3, #0]
  return result;
 8001db4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001db8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dba:	fab3 f383 	clz	r3, r3
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001dc4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	461a      	mov	r2, r3
 8001dcc:	2300      	movs	r3, #0
 8001dce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd0:	f7fe ff6c 	bl	8000cac <HAL_GetTick>
 8001dd4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dd8:	e009      	b.n	8001dee <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dda:	f7fe ff67 	bl	8000cac <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e1a2      	b.n	8002134 <HAL_RCC_OscConfig+0xe1c>
 8001dee:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001df2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001df6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	fa93 f2a3 	rbit	r2, r3
 8001e02:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001e06:	601a      	str	r2, [r3, #0]
  return result;
 8001e08:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001e0c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e0e:	fab3 f383 	clz	r3, r3
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	095b      	lsrs	r3, r3, #5
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d102      	bne.n	8001e28 <HAL_RCC_OscConfig+0xb10>
 8001e22:	4b4e      	ldr	r3, [pc, #312]	; (8001f5c <HAL_RCC_OscConfig+0xc44>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	e01b      	b.n	8001e60 <HAL_RCC_OscConfig+0xb48>
 8001e28:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e32:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	fa93 f2a3 	rbit	r2, r3
 8001e3c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	fa93 f2a3 	rbit	r2, r3
 8001e56:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	4b3f      	ldr	r3, [pc, #252]	; (8001f5c <HAL_RCC_OscConfig+0xc44>)
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e60:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001e64:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e68:	6011      	str	r1, [r2, #0]
 8001e6a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001e6e:	6812      	ldr	r2, [r2, #0]
 8001e70:	fa92 f1a2 	rbit	r1, r2
 8001e74:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001e78:	6011      	str	r1, [r2, #0]
  return result;
 8001e7a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001e7e:	6812      	ldr	r2, [r2, #0]
 8001e80:	fab2 f282 	clz	r2, r2
 8001e84:	b2d2      	uxtb	r2, r2
 8001e86:	f042 0220 	orr.w	r2, r2, #32
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	f002 021f 	and.w	r2, r2, #31
 8001e90:	2101      	movs	r1, #1
 8001e92:	fa01 f202 	lsl.w	r2, r1, r2
 8001e96:	4013      	ands	r3, r2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d19e      	bne.n	8001dda <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e9c:	4b2f      	ldr	r3, [pc, #188]	; (8001f5c <HAL_RCC_OscConfig+0xc44>)
 8001e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea0:	f023 020f 	bic.w	r2, r3, #15
 8001ea4:	1d3b      	adds	r3, r7, #4
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eaa:	492c      	ldr	r1, [pc, #176]	; (8001f5c <HAL_RCC_OscConfig+0xc44>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001eb0:	4b2a      	ldr	r3, [pc, #168]	; (8001f5c <HAL_RCC_OscConfig+0xc44>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001eb8:	1d3b      	adds	r3, r7, #4
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6a19      	ldr	r1, [r3, #32]
 8001ebe:	1d3b      	adds	r3, r7, #4
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	69db      	ldr	r3, [r3, #28]
 8001ec4:	430b      	orrs	r3, r1
 8001ec6:	4925      	ldr	r1, [pc, #148]	; (8001f5c <HAL_RCC_OscConfig+0xc44>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	604b      	str	r3, [r1, #4]
 8001ecc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ed0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ed4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	fa93 f2a3 	rbit	r2, r3
 8001ee0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ee4:	601a      	str	r2, [r3, #0]
  return result;
 8001ee6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001eea:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eec:	fab3 f383 	clz	r3, r3
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ef6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	461a      	mov	r2, r3
 8001efe:	2301      	movs	r3, #1
 8001f00:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f02:	f7fe fed3 	bl	8000cac <HAL_GetTick>
 8001f06:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f0a:	e009      	b.n	8001f20 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f0c:	f7fe fece 	bl	8000cac <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e109      	b.n	8002134 <HAL_RCC_OscConfig+0xe1c>
 8001f20:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	fa93 f2a3 	rbit	r2, r3
 8001f34:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f38:	601a      	str	r2, [r3, #0]
  return result;
 8001f3a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f3e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f40:	fab3 f383 	clz	r3, r3
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	095b      	lsrs	r3, r3, #5
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	f043 0301 	orr.w	r3, r3, #1
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d105      	bne.n	8001f60 <HAL_RCC_OscConfig+0xc48>
 8001f54:	4b01      	ldr	r3, [pc, #4]	; (8001f5c <HAL_RCC_OscConfig+0xc44>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	e01e      	b.n	8001f98 <HAL_RCC_OscConfig+0xc80>
 8001f5a:	bf00      	nop
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	fa93 f2a3 	rbit	r2, r3
 8001f74:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	fa93 f2a3 	rbit	r2, r3
 8001f8e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	4b6a      	ldr	r3, [pc, #424]	; (8002140 <HAL_RCC_OscConfig+0xe28>)
 8001f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f98:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001f9c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001fa0:	6011      	str	r1, [r2, #0]
 8001fa2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001fa6:	6812      	ldr	r2, [r2, #0]
 8001fa8:	fa92 f1a2 	rbit	r1, r2
 8001fac:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001fb0:	6011      	str	r1, [r2, #0]
  return result;
 8001fb2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001fb6:	6812      	ldr	r2, [r2, #0]
 8001fb8:	fab2 f282 	clz	r2, r2
 8001fbc:	b2d2      	uxtb	r2, r2
 8001fbe:	f042 0220 	orr.w	r2, r2, #32
 8001fc2:	b2d2      	uxtb	r2, r2
 8001fc4:	f002 021f 	and.w	r2, r2, #31
 8001fc8:	2101      	movs	r1, #1
 8001fca:	fa01 f202 	lsl.w	r2, r1, r2
 8001fce:	4013      	ands	r3, r2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d09b      	beq.n	8001f0c <HAL_RCC_OscConfig+0xbf4>
 8001fd4:	e0ad      	b.n	8002132 <HAL_RCC_OscConfig+0xe1a>
 8001fd6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001fda:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001fde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	fa93 f2a3 	rbit	r2, r3
 8001fea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fee:	601a      	str	r2, [r3, #0]
  return result;
 8001ff0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ff4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff6:	fab3 f383 	clz	r3, r3
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002000:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	461a      	mov	r2, r3
 8002008:	2300      	movs	r3, #0
 800200a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200c:	f7fe fe4e 	bl	8000cac <HAL_GetTick>
 8002010:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002014:	e009      	b.n	800202a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002016:	f7fe fe49 	bl	8000cac <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e084      	b.n	8002134 <HAL_RCC_OscConfig+0xe1c>
 800202a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800202e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002032:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002034:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	fa93 f2a3 	rbit	r2, r3
 800203e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002042:	601a      	str	r2, [r3, #0]
  return result;
 8002044:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002048:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800204a:	fab3 f383 	clz	r3, r3
 800204e:	b2db      	uxtb	r3, r3
 8002050:	095b      	lsrs	r3, r3, #5
 8002052:	b2db      	uxtb	r3, r3
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b01      	cmp	r3, #1
 800205c:	d102      	bne.n	8002064 <HAL_RCC_OscConfig+0xd4c>
 800205e:	4b38      	ldr	r3, [pc, #224]	; (8002140 <HAL_RCC_OscConfig+0xe28>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	e01b      	b.n	800209c <HAL_RCC_OscConfig+0xd84>
 8002064:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002068:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800206c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	fa93 f2a3 	rbit	r2, r3
 8002078:	f107 0320 	add.w	r3, r7, #32
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	f107 031c 	add.w	r3, r7, #28
 8002082:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	f107 031c 	add.w	r3, r7, #28
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	fa93 f2a3 	rbit	r2, r3
 8002092:	f107 0318 	add.w	r3, r7, #24
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	4b29      	ldr	r3, [pc, #164]	; (8002140 <HAL_RCC_OscConfig+0xe28>)
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	f107 0214 	add.w	r2, r7, #20
 80020a0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80020a4:	6011      	str	r1, [r2, #0]
 80020a6:	f107 0214 	add.w	r2, r7, #20
 80020aa:	6812      	ldr	r2, [r2, #0]
 80020ac:	fa92 f1a2 	rbit	r1, r2
 80020b0:	f107 0210 	add.w	r2, r7, #16
 80020b4:	6011      	str	r1, [r2, #0]
  return result;
 80020b6:	f107 0210 	add.w	r2, r7, #16
 80020ba:	6812      	ldr	r2, [r2, #0]
 80020bc:	fab2 f282 	clz	r2, r2
 80020c0:	b2d2      	uxtb	r2, r2
 80020c2:	f042 0220 	orr.w	r2, r2, #32
 80020c6:	b2d2      	uxtb	r2, r2
 80020c8:	f002 021f 	and.w	r2, r2, #31
 80020cc:	2101      	movs	r1, #1
 80020ce:	fa01 f202 	lsl.w	r2, r1, r2
 80020d2:	4013      	ands	r3, r2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d19e      	bne.n	8002016 <HAL_RCC_OscConfig+0xcfe>
 80020d8:	e02b      	b.n	8002132 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020da:	1d3b      	adds	r3, r7, #4
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d101      	bne.n	80020e8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e025      	b.n	8002134 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020e8:	4b15      	ldr	r3, [pc, #84]	; (8002140 <HAL_RCC_OscConfig+0xe28>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80020f0:	4b13      	ldr	r3, [pc, #76]	; (8002140 <HAL_RCC_OscConfig+0xe28>)
 80020f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80020f8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80020fc:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002100:	1d3b      	adds	r3, r7, #4
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	429a      	cmp	r2, r3
 8002108:	d111      	bne.n	800212e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800210a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800210e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002112:	1d3b      	adds	r3, r7, #4
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002118:	429a      	cmp	r2, r3
 800211a:	d108      	bne.n	800212e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800211c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002120:	f003 020f 	and.w	r2, r3, #15
 8002124:	1d3b      	adds	r3, r7, #4
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800212a:	429a      	cmp	r2, r3
 800212c:	d001      	beq.n	8002132 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e000      	b.n	8002134 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40021000 	.word	0x40021000

08002144 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b09e      	sub	sp, #120	; 0x78
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800214e:	2300      	movs	r3, #0
 8002150:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e162      	b.n	8002422 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800215c:	4b90      	ldr	r3, [pc, #576]	; (80023a0 <HAL_RCC_ClockConfig+0x25c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d910      	bls.n	800218c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216a:	4b8d      	ldr	r3, [pc, #564]	; (80023a0 <HAL_RCC_ClockConfig+0x25c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f023 0207 	bic.w	r2, r3, #7
 8002172:	498b      	ldr	r1, [pc, #556]	; (80023a0 <HAL_RCC_ClockConfig+0x25c>)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	4313      	orrs	r3, r2
 8002178:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800217a:	4b89      	ldr	r3, [pc, #548]	; (80023a0 <HAL_RCC_ClockConfig+0x25c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	429a      	cmp	r2, r3
 8002186:	d001      	beq.n	800218c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e14a      	b.n	8002422 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d008      	beq.n	80021aa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002198:	4b82      	ldr	r3, [pc, #520]	; (80023a4 <HAL_RCC_ClockConfig+0x260>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	497f      	ldr	r1, [pc, #508]	; (80023a4 <HAL_RCC_ClockConfig+0x260>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f000 80dc 	beq.w	8002370 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d13c      	bne.n	800223a <HAL_RCC_ClockConfig+0xf6>
 80021c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021c4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021c8:	fa93 f3a3 	rbit	r3, r3
 80021cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80021ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d0:	fab3 f383 	clz	r3, r3
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	095b      	lsrs	r3, r3, #5
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	f043 0301 	orr.w	r3, r3, #1
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d102      	bne.n	80021ea <HAL_RCC_ClockConfig+0xa6>
 80021e4:	4b6f      	ldr	r3, [pc, #444]	; (80023a4 <HAL_RCC_ClockConfig+0x260>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	e00f      	b.n	800220a <HAL_RCC_ClockConfig+0xc6>
 80021ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021ee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021f2:	fa93 f3a3 	rbit	r3, r3
 80021f6:	667b      	str	r3, [r7, #100]	; 0x64
 80021f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021fc:	663b      	str	r3, [r7, #96]	; 0x60
 80021fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002200:	fa93 f3a3 	rbit	r3, r3
 8002204:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002206:	4b67      	ldr	r3, [pc, #412]	; (80023a4 <HAL_RCC_ClockConfig+0x260>)
 8002208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800220e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002210:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002212:	fa92 f2a2 	rbit	r2, r2
 8002216:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002218:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800221a:	fab2 f282 	clz	r2, r2
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	f042 0220 	orr.w	r2, r2, #32
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	f002 021f 	and.w	r2, r2, #31
 800222a:	2101      	movs	r1, #1
 800222c:	fa01 f202 	lsl.w	r2, r1, r2
 8002230:	4013      	ands	r3, r2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d17b      	bne.n	800232e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e0f3      	b.n	8002422 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b02      	cmp	r3, #2
 8002240:	d13c      	bne.n	80022bc <HAL_RCC_ClockConfig+0x178>
 8002242:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002246:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800224a:	fa93 f3a3 	rbit	r3, r3
 800224e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002252:	fab3 f383 	clz	r3, r3
 8002256:	b2db      	uxtb	r3, r3
 8002258:	095b      	lsrs	r3, r3, #5
 800225a:	b2db      	uxtb	r3, r3
 800225c:	f043 0301 	orr.w	r3, r3, #1
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b01      	cmp	r3, #1
 8002264:	d102      	bne.n	800226c <HAL_RCC_ClockConfig+0x128>
 8002266:	4b4f      	ldr	r3, [pc, #316]	; (80023a4 <HAL_RCC_ClockConfig+0x260>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	e00f      	b.n	800228c <HAL_RCC_ClockConfig+0x148>
 800226c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002270:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002272:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002274:	fa93 f3a3 	rbit	r3, r3
 8002278:	647b      	str	r3, [r7, #68]	; 0x44
 800227a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800227e:	643b      	str	r3, [r7, #64]	; 0x40
 8002280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002282:	fa93 f3a3 	rbit	r3, r3
 8002286:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002288:	4b46      	ldr	r3, [pc, #280]	; (80023a4 <HAL_RCC_ClockConfig+0x260>)
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002290:	63ba      	str	r2, [r7, #56]	; 0x38
 8002292:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002294:	fa92 f2a2 	rbit	r2, r2
 8002298:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800229a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800229c:	fab2 f282 	clz	r2, r2
 80022a0:	b2d2      	uxtb	r2, r2
 80022a2:	f042 0220 	orr.w	r2, r2, #32
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	f002 021f 	and.w	r2, r2, #31
 80022ac:	2101      	movs	r1, #1
 80022ae:	fa01 f202 	lsl.w	r2, r1, r2
 80022b2:	4013      	ands	r3, r2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d13a      	bne.n	800232e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e0b2      	b.n	8002422 <HAL_RCC_ClockConfig+0x2de>
 80022bc:	2302      	movs	r3, #2
 80022be:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c2:	fa93 f3a3 	rbit	r3, r3
 80022c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80022c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ca:	fab3 f383 	clz	r3, r3
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	095b      	lsrs	r3, r3, #5
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	f043 0301 	orr.w	r3, r3, #1
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d102      	bne.n	80022e4 <HAL_RCC_ClockConfig+0x1a0>
 80022de:	4b31      	ldr	r3, [pc, #196]	; (80023a4 <HAL_RCC_ClockConfig+0x260>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	e00d      	b.n	8002300 <HAL_RCC_ClockConfig+0x1bc>
 80022e4:	2302      	movs	r3, #2
 80022e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ea:	fa93 f3a3 	rbit	r3, r3
 80022ee:	627b      	str	r3, [r7, #36]	; 0x24
 80022f0:	2302      	movs	r3, #2
 80022f2:	623b      	str	r3, [r7, #32]
 80022f4:	6a3b      	ldr	r3, [r7, #32]
 80022f6:	fa93 f3a3 	rbit	r3, r3
 80022fa:	61fb      	str	r3, [r7, #28]
 80022fc:	4b29      	ldr	r3, [pc, #164]	; (80023a4 <HAL_RCC_ClockConfig+0x260>)
 80022fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002300:	2202      	movs	r2, #2
 8002302:	61ba      	str	r2, [r7, #24]
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	fa92 f2a2 	rbit	r2, r2
 800230a:	617a      	str	r2, [r7, #20]
  return result;
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	fab2 f282 	clz	r2, r2
 8002312:	b2d2      	uxtb	r2, r2
 8002314:	f042 0220 	orr.w	r2, r2, #32
 8002318:	b2d2      	uxtb	r2, r2
 800231a:	f002 021f 	and.w	r2, r2, #31
 800231e:	2101      	movs	r1, #1
 8002320:	fa01 f202 	lsl.w	r2, r1, r2
 8002324:	4013      	ands	r3, r2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e079      	b.n	8002422 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800232e:	4b1d      	ldr	r3, [pc, #116]	; (80023a4 <HAL_RCC_ClockConfig+0x260>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f023 0203 	bic.w	r2, r3, #3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	491a      	ldr	r1, [pc, #104]	; (80023a4 <HAL_RCC_ClockConfig+0x260>)
 800233c:	4313      	orrs	r3, r2
 800233e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002340:	f7fe fcb4 	bl	8000cac <HAL_GetTick>
 8002344:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002346:	e00a      	b.n	800235e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002348:	f7fe fcb0 	bl	8000cac <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	f241 3288 	movw	r2, #5000	; 0x1388
 8002356:	4293      	cmp	r3, r2
 8002358:	d901      	bls.n	800235e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e061      	b.n	8002422 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235e:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <HAL_RCC_ClockConfig+0x260>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f003 020c 	and.w	r2, r3, #12
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	429a      	cmp	r2, r3
 800236e:	d1eb      	bne.n	8002348 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002370:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <HAL_RCC_ClockConfig+0x25c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	429a      	cmp	r2, r3
 800237c:	d214      	bcs.n	80023a8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237e:	4b08      	ldr	r3, [pc, #32]	; (80023a0 <HAL_RCC_ClockConfig+0x25c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f023 0207 	bic.w	r2, r3, #7
 8002386:	4906      	ldr	r1, [pc, #24]	; (80023a0 <HAL_RCC_ClockConfig+0x25c>)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	4313      	orrs	r3, r2
 800238c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800238e:	4b04      	ldr	r3, [pc, #16]	; (80023a0 <HAL_RCC_ClockConfig+0x25c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	429a      	cmp	r2, r3
 800239a:	d005      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e040      	b.n	8002422 <HAL_RCC_ClockConfig+0x2de>
 80023a0:	40022000 	.word	0x40022000
 80023a4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d008      	beq.n	80023c6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023b4:	4b1d      	ldr	r3, [pc, #116]	; (800242c <HAL_RCC_ClockConfig+0x2e8>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	491a      	ldr	r1, [pc, #104]	; (800242c <HAL_RCC_ClockConfig+0x2e8>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0308 	and.w	r3, r3, #8
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d009      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023d2:	4b16      	ldr	r3, [pc, #88]	; (800242c <HAL_RCC_ClockConfig+0x2e8>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	4912      	ldr	r1, [pc, #72]	; (800242c <HAL_RCC_ClockConfig+0x2e8>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80023e6:	f000 f829 	bl	800243c <HAL_RCC_GetSysClockFreq>
 80023ea:	4601      	mov	r1, r0
 80023ec:	4b0f      	ldr	r3, [pc, #60]	; (800242c <HAL_RCC_ClockConfig+0x2e8>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023f4:	22f0      	movs	r2, #240	; 0xf0
 80023f6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	fa92 f2a2 	rbit	r2, r2
 80023fe:	60fa      	str	r2, [r7, #12]
  return result;
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	fab2 f282 	clz	r2, r2
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	40d3      	lsrs	r3, r2
 800240a:	4a09      	ldr	r2, [pc, #36]	; (8002430 <HAL_RCC_ClockConfig+0x2ec>)
 800240c:	5cd3      	ldrb	r3, [r2, r3]
 800240e:	fa21 f303 	lsr.w	r3, r1, r3
 8002412:	4a08      	ldr	r2, [pc, #32]	; (8002434 <HAL_RCC_ClockConfig+0x2f0>)
 8002414:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002416:	4b08      	ldr	r3, [pc, #32]	; (8002438 <HAL_RCC_ClockConfig+0x2f4>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f7fe fc02 	bl	8000c24 <HAL_InitTick>
  
  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3778      	adds	r7, #120	; 0x78
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40021000 	.word	0x40021000
 8002430:	08004be8 	.word	0x08004be8
 8002434:	20000000 	.word	0x20000000
 8002438:	20000004 	.word	0x20000004

0800243c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800243c:	b480      	push	{r7}
 800243e:	b08b      	sub	sp, #44	; 0x2c
 8002440:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002442:	2300      	movs	r3, #0
 8002444:	61fb      	str	r3, [r7, #28]
 8002446:	2300      	movs	r3, #0
 8002448:	61bb      	str	r3, [r7, #24]
 800244a:	2300      	movs	r3, #0
 800244c:	627b      	str	r3, [r7, #36]	; 0x24
 800244e:	2300      	movs	r3, #0
 8002450:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002452:	2300      	movs	r3, #0
 8002454:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002456:	4b2a      	ldr	r3, [pc, #168]	; (8002500 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	f003 030c 	and.w	r3, r3, #12
 8002462:	2b04      	cmp	r3, #4
 8002464:	d002      	beq.n	800246c <HAL_RCC_GetSysClockFreq+0x30>
 8002466:	2b08      	cmp	r3, #8
 8002468:	d003      	beq.n	8002472 <HAL_RCC_GetSysClockFreq+0x36>
 800246a:	e03f      	b.n	80024ec <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800246c:	4b25      	ldr	r3, [pc, #148]	; (8002504 <HAL_RCC_GetSysClockFreq+0xc8>)
 800246e:	623b      	str	r3, [r7, #32]
      break;
 8002470:	e03f      	b.n	80024f2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002478:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800247c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247e:	68ba      	ldr	r2, [r7, #8]
 8002480:	fa92 f2a2 	rbit	r2, r2
 8002484:	607a      	str	r2, [r7, #4]
  return result;
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	fab2 f282 	clz	r2, r2
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	40d3      	lsrs	r3, r2
 8002490:	4a1d      	ldr	r2, [pc, #116]	; (8002508 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002492:	5cd3      	ldrb	r3, [r2, r3]
 8002494:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002496:	4b1a      	ldr	r3, [pc, #104]	; (8002500 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	220f      	movs	r2, #15
 80024a0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	fa92 f2a2 	rbit	r2, r2
 80024a8:	60fa      	str	r2, [r7, #12]
  return result;
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	fab2 f282 	clz	r2, r2
 80024b0:	b2d2      	uxtb	r2, r2
 80024b2:	40d3      	lsrs	r3, r2
 80024b4:	4a15      	ldr	r2, [pc, #84]	; (800250c <HAL_RCC_GetSysClockFreq+0xd0>)
 80024b6:	5cd3      	ldrb	r3, [r2, r3]
 80024b8:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d008      	beq.n	80024d6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80024c4:	4a0f      	ldr	r2, [pc, #60]	; (8002504 <HAL_RCC_GetSysClockFreq+0xc8>)
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	fb02 f303 	mul.w	r3, r2, r3
 80024d2:	627b      	str	r3, [r7, #36]	; 0x24
 80024d4:	e007      	b.n	80024e6 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80024d6:	4a0b      	ldr	r2, [pc, #44]	; (8002504 <HAL_RCC_GetSysClockFreq+0xc8>)
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	fbb2 f2f3 	udiv	r2, r2, r3
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	fb02 f303 	mul.w	r3, r2, r3
 80024e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	623b      	str	r3, [r7, #32]
      break;
 80024ea:	e002      	b.n	80024f2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024ec:	4b05      	ldr	r3, [pc, #20]	; (8002504 <HAL_RCC_GetSysClockFreq+0xc8>)
 80024ee:	623b      	str	r3, [r7, #32]
      break;
 80024f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024f2:	6a3b      	ldr	r3, [r7, #32]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	372c      	adds	r7, #44	; 0x2c
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	40021000 	.word	0x40021000
 8002504:	007a1200 	.word	0x007a1200
 8002508:	08004c00 	.word	0x08004c00
 800250c:	08004c10 	.word	0x08004c10

08002510 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002514:	4b03      	ldr	r3, [pc, #12]	; (8002524 <HAL_RCC_GetHCLKFreq+0x14>)
 8002516:	681b      	ldr	r3, [r3, #0]
}
 8002518:	4618      	mov	r0, r3
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	20000000 	.word	0x20000000

08002528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800252e:	f7ff ffef 	bl	8002510 <HAL_RCC_GetHCLKFreq>
 8002532:	4601      	mov	r1, r0
 8002534:	4b0b      	ldr	r3, [pc, #44]	; (8002564 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800253c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002540:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	fa92 f2a2 	rbit	r2, r2
 8002548:	603a      	str	r2, [r7, #0]
  return result;
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	fab2 f282 	clz	r2, r2
 8002550:	b2d2      	uxtb	r2, r2
 8002552:	40d3      	lsrs	r3, r2
 8002554:	4a04      	ldr	r2, [pc, #16]	; (8002568 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002556:	5cd3      	ldrb	r3, [r2, r3]
 8002558:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800255c:	4618      	mov	r0, r3
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40021000 	.word	0x40021000
 8002568:	08004bf8 	.word	0x08004bf8

0800256c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002572:	f7ff ffcd 	bl	8002510 <HAL_RCC_GetHCLKFreq>
 8002576:	4601      	mov	r1, r0
 8002578:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002580:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002584:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	fa92 f2a2 	rbit	r2, r2
 800258c:	603a      	str	r2, [r7, #0]
  return result;
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	fab2 f282 	clz	r2, r2
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	40d3      	lsrs	r3, r2
 8002598:	4a04      	ldr	r2, [pc, #16]	; (80025ac <HAL_RCC_GetPCLK2Freq+0x40>)
 800259a:	5cd3      	ldrb	r3, [r2, r3]
 800259c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80025a0:	4618      	mov	r0, r3
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40021000 	.word	0x40021000
 80025ac:	08004bf8 	.word	0x08004bf8

080025b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b092      	sub	sp, #72	; 0x48
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025b8:	2300      	movs	r3, #0
 80025ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80025bc:	2300      	movs	r3, #0
 80025be:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80025c0:	2300      	movs	r3, #0
 80025c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f000 80d4 	beq.w	800277c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025d4:	4b4e      	ldr	r3, [pc, #312]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10e      	bne.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025e0:	4b4b      	ldr	r3, [pc, #300]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025e2:	69db      	ldr	r3, [r3, #28]
 80025e4:	4a4a      	ldr	r2, [pc, #296]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ea:	61d3      	str	r3, [r2, #28]
 80025ec:	4b48      	ldr	r3, [pc, #288]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f4:	60bb      	str	r3, [r7, #8]
 80025f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025f8:	2301      	movs	r3, #1
 80025fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fe:	4b45      	ldr	r3, [pc, #276]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002606:	2b00      	cmp	r3, #0
 8002608:	d118      	bne.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800260a:	4b42      	ldr	r3, [pc, #264]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a41      	ldr	r2, [pc, #260]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002614:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002616:	f7fe fb49 	bl	8000cac <HAL_GetTick>
 800261a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261c:	e008      	b.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800261e:	f7fe fb45 	bl	8000cac <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b64      	cmp	r3, #100	; 0x64
 800262a:	d901      	bls.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e1d6      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002630:	4b38      	ldr	r3, [pc, #224]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0f0      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800263c:	4b34      	ldr	r3, [pc, #208]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002644:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 8084 	beq.w	8002756 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002656:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002658:	429a      	cmp	r2, r3
 800265a:	d07c      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800265c:	4b2c      	ldr	r3, [pc, #176]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002664:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002666:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800266a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266e:	fa93 f3a3 	rbit	r3, r3
 8002672:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002676:	fab3 f383 	clz	r3, r3
 800267a:	b2db      	uxtb	r3, r3
 800267c:	461a      	mov	r2, r3
 800267e:	4b26      	ldr	r3, [pc, #152]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002680:	4413      	add	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	461a      	mov	r2, r3
 8002686:	2301      	movs	r3, #1
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800268e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002692:	fa93 f3a3 	rbit	r3, r3
 8002696:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800269a:	fab3 f383 	clz	r3, r3
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	461a      	mov	r2, r3
 80026a2:	4b1d      	ldr	r3, [pc, #116]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80026a4:	4413      	add	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	461a      	mov	r2, r3
 80026aa:	2300      	movs	r3, #0
 80026ac:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80026ae:	4a18      	ldr	r2, [pc, #96]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026b2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80026b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d04b      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026be:	f7fe faf5 	bl	8000cac <HAL_GetTick>
 80026c2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026c4:	e00a      	b.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c6:	f7fe faf1 	bl	8000cac <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d901      	bls.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e180      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80026dc:	2302      	movs	r3, #2
 80026de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e2:	fa93 f3a3 	rbit	r3, r3
 80026e6:	627b      	str	r3, [r7, #36]	; 0x24
 80026e8:	2302      	movs	r3, #2
 80026ea:	623b      	str	r3, [r7, #32]
 80026ec:	6a3b      	ldr	r3, [r7, #32]
 80026ee:	fa93 f3a3 	rbit	r3, r3
 80026f2:	61fb      	str	r3, [r7, #28]
  return result;
 80026f4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f6:	fab3 f383 	clz	r3, r3
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	095b      	lsrs	r3, r3, #5
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	f043 0302 	orr.w	r3, r3, #2
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d108      	bne.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800270a:	4b01      	ldr	r3, [pc, #4]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	e00d      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002710:	40021000 	.word	0x40021000
 8002714:	40007000 	.word	0x40007000
 8002718:	10908100 	.word	0x10908100
 800271c:	2302      	movs	r3, #2
 800271e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	fa93 f3a3 	rbit	r3, r3
 8002726:	617b      	str	r3, [r7, #20]
 8002728:	4ba0      	ldr	r3, [pc, #640]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	2202      	movs	r2, #2
 800272e:	613a      	str	r2, [r7, #16]
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	fa92 f2a2 	rbit	r2, r2
 8002736:	60fa      	str	r2, [r7, #12]
  return result;
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	fab2 f282 	clz	r2, r2
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002744:	b2d2      	uxtb	r2, r2
 8002746:	f002 021f 	and.w	r2, r2, #31
 800274a:	2101      	movs	r1, #1
 800274c:	fa01 f202 	lsl.w	r2, r1, r2
 8002750:	4013      	ands	r3, r2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0b7      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002756:	4b95      	ldr	r3, [pc, #596]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	4992      	ldr	r1, [pc, #584]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002764:	4313      	orrs	r3, r2
 8002766:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002768:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800276c:	2b01      	cmp	r3, #1
 800276e:	d105      	bne.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002770:	4b8e      	ldr	r3, [pc, #568]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002772:	69db      	ldr	r3, [r3, #28]
 8002774:	4a8d      	ldr	r2, [pc, #564]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002776:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800277a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	2b00      	cmp	r3, #0
 8002786:	d008      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002788:	4b88      	ldr	r3, [pc, #544]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800278a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278c:	f023 0203 	bic.w	r2, r3, #3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	4985      	ldr	r1, [pc, #532]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002796:	4313      	orrs	r3, r2
 8002798:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d008      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027a6:	4b81      	ldr	r3, [pc, #516]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	497e      	ldr	r1, [pc, #504]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d008      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027c4:	4b79      	ldr	r3, [pc, #484]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	4976      	ldr	r1, [pc, #472]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0320 	and.w	r3, r3, #32
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d008      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027e2:	4b72      	ldr	r3, [pc, #456]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	f023 0210 	bic.w	r2, r3, #16
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	496f      	ldr	r1, [pc, #444]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d008      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002800:	4b6a      	ldr	r3, [pc, #424]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280c:	4967      	ldr	r1, [pc, #412]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800280e:	4313      	orrs	r3, r2
 8002810:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800281a:	2b00      	cmp	r3, #0
 800281c:	d008      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800281e:	4b63      	ldr	r3, [pc, #396]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	f023 0220 	bic.w	r2, r3, #32
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	4960      	ldr	r1, [pc, #384]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800282c:	4313      	orrs	r3, r2
 800282e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d008      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800283c:	4b5b      	ldr	r3, [pc, #364]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800283e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002840:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002848:	4958      	ldr	r1, [pc, #352]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800284a:	4313      	orrs	r3, r2
 800284c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0308 	and.w	r3, r3, #8
 8002856:	2b00      	cmp	r3, #0
 8002858:	d008      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800285a:	4b54      	ldr	r3, [pc, #336]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	4951      	ldr	r1, [pc, #324]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002868:	4313      	orrs	r3, r2
 800286a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0310 	and.w	r3, r3, #16
 8002874:	2b00      	cmp	r3, #0
 8002876:	d008      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002878:	4b4c      	ldr	r3, [pc, #304]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800287a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	4949      	ldr	r1, [pc, #292]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002886:	4313      	orrs	r3, r2
 8002888:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002892:	2b00      	cmp	r3, #0
 8002894:	d008      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002896:	4b45      	ldr	r3, [pc, #276]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	4942      	ldr	r1, [pc, #264]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d008      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80028b4:	4b3d      	ldr	r3, [pc, #244]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c0:	493a      	ldr	r1, [pc, #232]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d008      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80028d2:	4b36      	ldr	r3, [pc, #216]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028de:	4933      	ldr	r1, [pc, #204]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d008      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80028f0:	4b2e      	ldr	r3, [pc, #184]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028fc:	492b      	ldr	r1, [pc, #172]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d008      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800290e:	4b27      	ldr	r3, [pc, #156]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	4924      	ldr	r1, [pc, #144]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800291c:	4313      	orrs	r3, r2
 800291e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d008      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800292c:	4b1f      	ldr	r3, [pc, #124]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800292e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002930:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002938:	491c      	ldr	r1, [pc, #112]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800293a:	4313      	orrs	r3, r2
 800293c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d008      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800294a:	4b18      	ldr	r3, [pc, #96]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002956:	4915      	ldr	r1, [pc, #84]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002958:	4313      	orrs	r3, r2
 800295a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d008      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002968:	4b10      	ldr	r3, [pc, #64]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800296a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002974:	490d      	ldr	r1, [pc, #52]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002976:	4313      	orrs	r3, r2
 8002978:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d008      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002986:	4b09      	ldr	r3, [pc, #36]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002992:	4906      	ldr	r1, [pc, #24]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002994:	4313      	orrs	r3, r2
 8002996:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00c      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80029a4:	4b01      	ldr	r3, [pc, #4]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a8:	e002      	b.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80029aa:	bf00      	nop
 80029ac:	40021000 	.word	0x40021000
 80029b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b8:	490b      	ldr	r1, [pc, #44]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d008      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80029ca:	4b07      	ldr	r3, [pc, #28]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029d6:	4904      	ldr	r1, [pc, #16]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3748      	adds	r7, #72	; 0x48
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	40021000 	.word	0x40021000

080029ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e049      	b.n	8002a92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d106      	bne.n	8002a18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f7fd ff76 	bl	8000904 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3304      	adds	r3, #4
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4610      	mov	r0, r2
 8002a2c:	f000 fb6c 	bl	8003108 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b082      	sub	sp, #8
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e049      	b.n	8002b40 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d106      	bne.n	8002ac6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f000 f841 	bl	8002b48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2202      	movs	r2, #2
 8002aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	3304      	adds	r3, #4
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4610      	mov	r0, r2
 8002ada:	f000 fb15 	bl	8003108 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3708      	adds	r7, #8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d109      	bne.n	8002b80 <HAL_TIM_PWM_Start+0x24>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	bf14      	ite	ne
 8002b78:	2301      	movne	r3, #1
 8002b7a:	2300      	moveq	r3, #0
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	e03c      	b.n	8002bfa <HAL_TIM_PWM_Start+0x9e>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	d109      	bne.n	8002b9a <HAL_TIM_PWM_Start+0x3e>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	bf14      	ite	ne
 8002b92:	2301      	movne	r3, #1
 8002b94:	2300      	moveq	r3, #0
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	e02f      	b.n	8002bfa <HAL_TIM_PWM_Start+0x9e>
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	2b08      	cmp	r3, #8
 8002b9e:	d109      	bne.n	8002bb4 <HAL_TIM_PWM_Start+0x58>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	bf14      	ite	ne
 8002bac:	2301      	movne	r3, #1
 8002bae:	2300      	moveq	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	e022      	b.n	8002bfa <HAL_TIM_PWM_Start+0x9e>
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	2b0c      	cmp	r3, #12
 8002bb8:	d109      	bne.n	8002bce <HAL_TIM_PWM_Start+0x72>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	bf14      	ite	ne
 8002bc6:	2301      	movne	r3, #1
 8002bc8:	2300      	moveq	r3, #0
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	e015      	b.n	8002bfa <HAL_TIM_PWM_Start+0x9e>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	2b10      	cmp	r3, #16
 8002bd2:	d109      	bne.n	8002be8 <HAL_TIM_PWM_Start+0x8c>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	bf14      	ite	ne
 8002be0:	2301      	movne	r3, #1
 8002be2:	2300      	moveq	r3, #0
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	e008      	b.n	8002bfa <HAL_TIM_PWM_Start+0x9e>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	bf14      	ite	ne
 8002bf4:	2301      	movne	r3, #1
 8002bf6:	2300      	moveq	r3, #0
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e0a1      	b.n	8002d46 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d104      	bne.n	8002c12 <HAL_TIM_PWM_Start+0xb6>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c10:	e023      	b.n	8002c5a <HAL_TIM_PWM_Start+0xfe>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	2b04      	cmp	r3, #4
 8002c16:	d104      	bne.n	8002c22 <HAL_TIM_PWM_Start+0xc6>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c20:	e01b      	b.n	8002c5a <HAL_TIM_PWM_Start+0xfe>
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	2b08      	cmp	r3, #8
 8002c26:	d104      	bne.n	8002c32 <HAL_TIM_PWM_Start+0xd6>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c30:	e013      	b.n	8002c5a <HAL_TIM_PWM_Start+0xfe>
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	2b0c      	cmp	r3, #12
 8002c36:	d104      	bne.n	8002c42 <HAL_TIM_PWM_Start+0xe6>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c40:	e00b      	b.n	8002c5a <HAL_TIM_PWM_Start+0xfe>
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	2b10      	cmp	r3, #16
 8002c46:	d104      	bne.n	8002c52 <HAL_TIM_PWM_Start+0xf6>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c50:	e003      	b.n	8002c5a <HAL_TIM_PWM_Start+0xfe>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2202      	movs	r2, #2
 8002c56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	6839      	ldr	r1, [r7, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f000 fe8e 	bl	8003984 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a38      	ldr	r2, [pc, #224]	; (8002d50 <HAL_TIM_PWM_Start+0x1f4>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d018      	beq.n	8002ca4 <HAL_TIM_PWM_Start+0x148>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a37      	ldr	r2, [pc, #220]	; (8002d54 <HAL_TIM_PWM_Start+0x1f8>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d013      	beq.n	8002ca4 <HAL_TIM_PWM_Start+0x148>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a35      	ldr	r2, [pc, #212]	; (8002d58 <HAL_TIM_PWM_Start+0x1fc>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d00e      	beq.n	8002ca4 <HAL_TIM_PWM_Start+0x148>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a34      	ldr	r2, [pc, #208]	; (8002d5c <HAL_TIM_PWM_Start+0x200>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d009      	beq.n	8002ca4 <HAL_TIM_PWM_Start+0x148>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a32      	ldr	r2, [pc, #200]	; (8002d60 <HAL_TIM_PWM_Start+0x204>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d004      	beq.n	8002ca4 <HAL_TIM_PWM_Start+0x148>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a31      	ldr	r2, [pc, #196]	; (8002d64 <HAL_TIM_PWM_Start+0x208>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d101      	bne.n	8002ca8 <HAL_TIM_PWM_Start+0x14c>
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e000      	b.n	8002caa <HAL_TIM_PWM_Start+0x14e>
 8002ca8:	2300      	movs	r3, #0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d007      	beq.n	8002cbe <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cbc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a23      	ldr	r2, [pc, #140]	; (8002d50 <HAL_TIM_PWM_Start+0x1f4>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d01d      	beq.n	8002d04 <HAL_TIM_PWM_Start+0x1a8>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cd0:	d018      	beq.n	8002d04 <HAL_TIM_PWM_Start+0x1a8>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a24      	ldr	r2, [pc, #144]	; (8002d68 <HAL_TIM_PWM_Start+0x20c>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d013      	beq.n	8002d04 <HAL_TIM_PWM_Start+0x1a8>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a22      	ldr	r2, [pc, #136]	; (8002d6c <HAL_TIM_PWM_Start+0x210>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d00e      	beq.n	8002d04 <HAL_TIM_PWM_Start+0x1a8>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a1a      	ldr	r2, [pc, #104]	; (8002d54 <HAL_TIM_PWM_Start+0x1f8>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d009      	beq.n	8002d04 <HAL_TIM_PWM_Start+0x1a8>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a18      	ldr	r2, [pc, #96]	; (8002d58 <HAL_TIM_PWM_Start+0x1fc>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d004      	beq.n	8002d04 <HAL_TIM_PWM_Start+0x1a8>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a19      	ldr	r2, [pc, #100]	; (8002d64 <HAL_TIM_PWM_Start+0x208>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d115      	bne.n	8002d30 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	4b19      	ldr	r3, [pc, #100]	; (8002d70 <HAL_TIM_PWM_Start+0x214>)
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2b06      	cmp	r3, #6
 8002d14:	d015      	beq.n	8002d42 <HAL_TIM_PWM_Start+0x1e6>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d1c:	d011      	beq.n	8002d42 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f042 0201 	orr.w	r2, r2, #1
 8002d2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d2e:	e008      	b.n	8002d42 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f042 0201 	orr.w	r2, r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	e000      	b.n	8002d44 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40012c00 	.word	0x40012c00
 8002d54:	40013400 	.word	0x40013400
 8002d58:	40014000 	.word	0x40014000
 8002d5c:	40014400 	.word	0x40014400
 8002d60:	40014800 	.word	0x40014800
 8002d64:	40015000 	.word	0x40015000
 8002d68:	40000400 	.word	0x40000400
 8002d6c:	40000800 	.word	0x40000800
 8002d70:	00010007 	.word	0x00010007

08002d74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d101      	bne.n	8002d8e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	e0fd      	b.n	8002f8a <HAL_TIM_PWM_ConfigChannel+0x216>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b14      	cmp	r3, #20
 8002d9a:	f200 80f0 	bhi.w	8002f7e <HAL_TIM_PWM_ConfigChannel+0x20a>
 8002d9e:	a201      	add	r2, pc, #4	; (adr r2, 8002da4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da4:	08002df9 	.word	0x08002df9
 8002da8:	08002f7f 	.word	0x08002f7f
 8002dac:	08002f7f 	.word	0x08002f7f
 8002db0:	08002f7f 	.word	0x08002f7f
 8002db4:	08002e39 	.word	0x08002e39
 8002db8:	08002f7f 	.word	0x08002f7f
 8002dbc:	08002f7f 	.word	0x08002f7f
 8002dc0:	08002f7f 	.word	0x08002f7f
 8002dc4:	08002e7b 	.word	0x08002e7b
 8002dc8:	08002f7f 	.word	0x08002f7f
 8002dcc:	08002f7f 	.word	0x08002f7f
 8002dd0:	08002f7f 	.word	0x08002f7f
 8002dd4:	08002ebb 	.word	0x08002ebb
 8002dd8:	08002f7f 	.word	0x08002f7f
 8002ddc:	08002f7f 	.word	0x08002f7f
 8002de0:	08002f7f 	.word	0x08002f7f
 8002de4:	08002efd 	.word	0x08002efd
 8002de8:	08002f7f 	.word	0x08002f7f
 8002dec:	08002f7f 	.word	0x08002f7f
 8002df0:	08002f7f 	.word	0x08002f7f
 8002df4:	08002f3d 	.word	0x08002f3d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68b9      	ldr	r1, [r7, #8]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 fa20 	bl	8003244 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	699a      	ldr	r2, [r3, #24]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f042 0208 	orr.w	r2, r2, #8
 8002e12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	699a      	ldr	r2, [r3, #24]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 0204 	bic.w	r2, r2, #4
 8002e22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6999      	ldr	r1, [r3, #24]
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	691a      	ldr	r2, [r3, #16]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	619a      	str	r2, [r3, #24]
      break;
 8002e36:	e0a3      	b.n	8002f80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68b9      	ldr	r1, [r7, #8]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f000 fa9a 	bl	8003378 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	699a      	ldr	r2, [r3, #24]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	699a      	ldr	r2, [r3, #24]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6999      	ldr	r1, [r3, #24]
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	021a      	lsls	r2, r3, #8
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	619a      	str	r2, [r3, #24]
      break;
 8002e78:	e082      	b.n	8002f80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68b9      	ldr	r1, [r7, #8]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f000 fb0d 	bl	80034a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	69da      	ldr	r2, [r3, #28]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f042 0208 	orr.w	r2, r2, #8
 8002e94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	69da      	ldr	r2, [r3, #28]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0204 	bic.w	r2, r2, #4
 8002ea4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	69d9      	ldr	r1, [r3, #28]
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	691a      	ldr	r2, [r3, #16]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	61da      	str	r2, [r3, #28]
      break;
 8002eb8:	e062      	b.n	8002f80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68b9      	ldr	r1, [r7, #8]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f000 fb7f 	bl	80035c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	69da      	ldr	r2, [r3, #28]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ed4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	69da      	ldr	r2, [r3, #28]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ee4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	69d9      	ldr	r1, [r3, #28]
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	021a      	lsls	r2, r3, #8
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	61da      	str	r2, [r3, #28]
      break;
 8002efa:	e041      	b.n	8002f80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68b9      	ldr	r1, [r7, #8]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f000 fbce 	bl	80036a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f042 0208 	orr.w	r2, r2, #8
 8002f16:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 0204 	bic.w	r2, r2, #4
 8002f26:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	691a      	ldr	r2, [r3, #16]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002f3a:	e021      	b.n	8002f80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68b9      	ldr	r1, [r7, #8]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 fc18 	bl	8003778 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f56:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f66:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	021a      	lsls	r2, r3, #8
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002f7c:	e000      	b.n	8002f80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8002f7e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop

08002f94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d101      	bne.n	8002fac <HAL_TIM_ConfigClockSource+0x18>
 8002fa8:	2302      	movs	r3, #2
 8002faa:	e0a8      	b.n	80030fe <HAL_TIM_ConfigClockSource+0x16a>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002fce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fd6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2b40      	cmp	r3, #64	; 0x40
 8002fe6:	d067      	beq.n	80030b8 <HAL_TIM_ConfigClockSource+0x124>
 8002fe8:	2b40      	cmp	r3, #64	; 0x40
 8002fea:	d80b      	bhi.n	8003004 <HAL_TIM_ConfigClockSource+0x70>
 8002fec:	2b10      	cmp	r3, #16
 8002fee:	d073      	beq.n	80030d8 <HAL_TIM_ConfigClockSource+0x144>
 8002ff0:	2b10      	cmp	r3, #16
 8002ff2:	d802      	bhi.n	8002ffa <HAL_TIM_ConfigClockSource+0x66>
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d06f      	beq.n	80030d8 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002ff8:	e078      	b.n	80030ec <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002ffa:	2b20      	cmp	r3, #32
 8002ffc:	d06c      	beq.n	80030d8 <HAL_TIM_ConfigClockSource+0x144>
 8002ffe:	2b30      	cmp	r3, #48	; 0x30
 8003000:	d06a      	beq.n	80030d8 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003002:	e073      	b.n	80030ec <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003004:	2b70      	cmp	r3, #112	; 0x70
 8003006:	d00d      	beq.n	8003024 <HAL_TIM_ConfigClockSource+0x90>
 8003008:	2b70      	cmp	r3, #112	; 0x70
 800300a:	d804      	bhi.n	8003016 <HAL_TIM_ConfigClockSource+0x82>
 800300c:	2b50      	cmp	r3, #80	; 0x50
 800300e:	d033      	beq.n	8003078 <HAL_TIM_ConfigClockSource+0xe4>
 8003010:	2b60      	cmp	r3, #96	; 0x60
 8003012:	d041      	beq.n	8003098 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003014:	e06a      	b.n	80030ec <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800301a:	d066      	beq.n	80030ea <HAL_TIM_ConfigClockSource+0x156>
 800301c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003020:	d017      	beq.n	8003052 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003022:	e063      	b.n	80030ec <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6818      	ldr	r0, [r3, #0]
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	6899      	ldr	r1, [r3, #8]
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	f000 fc86 	bl	8003944 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003046:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	609a      	str	r2, [r3, #8]
      break;
 8003050:	e04c      	b.n	80030ec <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6818      	ldr	r0, [r3, #0]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	6899      	ldr	r1, [r3, #8]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	f000 fc6f 	bl	8003944 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003074:	609a      	str	r2, [r3, #8]
      break;
 8003076:	e039      	b.n	80030ec <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6818      	ldr	r0, [r3, #0]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	6859      	ldr	r1, [r3, #4]
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	461a      	mov	r2, r3
 8003086:	f000 fbe3 	bl	8003850 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2150      	movs	r1, #80	; 0x50
 8003090:	4618      	mov	r0, r3
 8003092:	f000 fc3c 	bl	800390e <TIM_ITRx_SetConfig>
      break;
 8003096:	e029      	b.n	80030ec <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6818      	ldr	r0, [r3, #0]
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	6859      	ldr	r1, [r3, #4]
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	461a      	mov	r2, r3
 80030a6:	f000 fc02 	bl	80038ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2160      	movs	r1, #96	; 0x60
 80030b0:	4618      	mov	r0, r3
 80030b2:	f000 fc2c 	bl	800390e <TIM_ITRx_SetConfig>
      break;
 80030b6:	e019      	b.n	80030ec <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6818      	ldr	r0, [r3, #0]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	6859      	ldr	r1, [r3, #4]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	461a      	mov	r2, r3
 80030c6:	f000 fbc3 	bl	8003850 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2140      	movs	r1, #64	; 0x40
 80030d0:	4618      	mov	r0, r3
 80030d2:	f000 fc1c 	bl	800390e <TIM_ITRx_SetConfig>
      break;
 80030d6:	e009      	b.n	80030ec <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4619      	mov	r1, r3
 80030e2:	4610      	mov	r0, r2
 80030e4:	f000 fc13 	bl	800390e <TIM_ITRx_SetConfig>
        break;
 80030e8:	e000      	b.n	80030ec <HAL_TIM_ConfigClockSource+0x158>
      break;
 80030ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
	...

08003108 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a42      	ldr	r2, [pc, #264]	; (8003224 <TIM_Base_SetConfig+0x11c>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d013      	beq.n	8003148 <TIM_Base_SetConfig+0x40>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003126:	d00f      	beq.n	8003148 <TIM_Base_SetConfig+0x40>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a3f      	ldr	r2, [pc, #252]	; (8003228 <TIM_Base_SetConfig+0x120>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d00b      	beq.n	8003148 <TIM_Base_SetConfig+0x40>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a3e      	ldr	r2, [pc, #248]	; (800322c <TIM_Base_SetConfig+0x124>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d007      	beq.n	8003148 <TIM_Base_SetConfig+0x40>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a3d      	ldr	r2, [pc, #244]	; (8003230 <TIM_Base_SetConfig+0x128>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d003      	beq.n	8003148 <TIM_Base_SetConfig+0x40>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a3c      	ldr	r2, [pc, #240]	; (8003234 <TIM_Base_SetConfig+0x12c>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d108      	bne.n	800315a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800314e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	4313      	orrs	r3, r2
 8003158:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a31      	ldr	r2, [pc, #196]	; (8003224 <TIM_Base_SetConfig+0x11c>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d01f      	beq.n	80031a2 <TIM_Base_SetConfig+0x9a>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003168:	d01b      	beq.n	80031a2 <TIM_Base_SetConfig+0x9a>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a2e      	ldr	r2, [pc, #184]	; (8003228 <TIM_Base_SetConfig+0x120>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d017      	beq.n	80031a2 <TIM_Base_SetConfig+0x9a>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a2d      	ldr	r2, [pc, #180]	; (800322c <TIM_Base_SetConfig+0x124>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d013      	beq.n	80031a2 <TIM_Base_SetConfig+0x9a>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a2c      	ldr	r2, [pc, #176]	; (8003230 <TIM_Base_SetConfig+0x128>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d00f      	beq.n	80031a2 <TIM_Base_SetConfig+0x9a>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a2c      	ldr	r2, [pc, #176]	; (8003238 <TIM_Base_SetConfig+0x130>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d00b      	beq.n	80031a2 <TIM_Base_SetConfig+0x9a>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a2b      	ldr	r2, [pc, #172]	; (800323c <TIM_Base_SetConfig+0x134>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d007      	beq.n	80031a2 <TIM_Base_SetConfig+0x9a>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a2a      	ldr	r2, [pc, #168]	; (8003240 <TIM_Base_SetConfig+0x138>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d003      	beq.n	80031a2 <TIM_Base_SetConfig+0x9a>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a25      	ldr	r2, [pc, #148]	; (8003234 <TIM_Base_SetConfig+0x12c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d108      	bne.n	80031b4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	4313      	orrs	r3, r2
 80031c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a12      	ldr	r2, [pc, #72]	; (8003224 <TIM_Base_SetConfig+0x11c>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d013      	beq.n	8003208 <TIM_Base_SetConfig+0x100>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a13      	ldr	r2, [pc, #76]	; (8003230 <TIM_Base_SetConfig+0x128>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d00f      	beq.n	8003208 <TIM_Base_SetConfig+0x100>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a13      	ldr	r2, [pc, #76]	; (8003238 <TIM_Base_SetConfig+0x130>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d00b      	beq.n	8003208 <TIM_Base_SetConfig+0x100>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a12      	ldr	r2, [pc, #72]	; (800323c <TIM_Base_SetConfig+0x134>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d007      	beq.n	8003208 <TIM_Base_SetConfig+0x100>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a11      	ldr	r2, [pc, #68]	; (8003240 <TIM_Base_SetConfig+0x138>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d003      	beq.n	8003208 <TIM_Base_SetConfig+0x100>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a0c      	ldr	r2, [pc, #48]	; (8003234 <TIM_Base_SetConfig+0x12c>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d103      	bne.n	8003210 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	691a      	ldr	r2, [r3, #16]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	615a      	str	r2, [r3, #20]
}
 8003216:	bf00      	nop
 8003218:	3714      	adds	r7, #20
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	40012c00 	.word	0x40012c00
 8003228:	40000400 	.word	0x40000400
 800322c:	40000800 	.word	0x40000800
 8003230:	40013400 	.word	0x40013400
 8003234:	40015000 	.word	0x40015000
 8003238:	40014000 	.word	0x40014000
 800323c:	40014400 	.word	0x40014400
 8003240:	40014800 	.word	0x40014800

08003244 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003244:	b480      	push	{r7}
 8003246:	b087      	sub	sp, #28
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	f023 0201 	bic.w	r2, r3, #1
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f023 0303 	bic.w	r3, r3, #3
 800327e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	4313      	orrs	r3, r2
 8003288:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	f023 0302 	bic.w	r3, r3, #2
 8003290:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	4313      	orrs	r3, r2
 800329a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a30      	ldr	r2, [pc, #192]	; (8003360 <TIM_OC1_SetConfig+0x11c>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d013      	beq.n	80032cc <TIM_OC1_SetConfig+0x88>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a2f      	ldr	r2, [pc, #188]	; (8003364 <TIM_OC1_SetConfig+0x120>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d00f      	beq.n	80032cc <TIM_OC1_SetConfig+0x88>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a2e      	ldr	r2, [pc, #184]	; (8003368 <TIM_OC1_SetConfig+0x124>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d00b      	beq.n	80032cc <TIM_OC1_SetConfig+0x88>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a2d      	ldr	r2, [pc, #180]	; (800336c <TIM_OC1_SetConfig+0x128>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d007      	beq.n	80032cc <TIM_OC1_SetConfig+0x88>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a2c      	ldr	r2, [pc, #176]	; (8003370 <TIM_OC1_SetConfig+0x12c>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d003      	beq.n	80032cc <TIM_OC1_SetConfig+0x88>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a2b      	ldr	r2, [pc, #172]	; (8003374 <TIM_OC1_SetConfig+0x130>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d10c      	bne.n	80032e6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	f023 0308 	bic.w	r3, r3, #8
 80032d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	4313      	orrs	r3, r2
 80032dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	f023 0304 	bic.w	r3, r3, #4
 80032e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a1d      	ldr	r2, [pc, #116]	; (8003360 <TIM_OC1_SetConfig+0x11c>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d013      	beq.n	8003316 <TIM_OC1_SetConfig+0xd2>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a1c      	ldr	r2, [pc, #112]	; (8003364 <TIM_OC1_SetConfig+0x120>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d00f      	beq.n	8003316 <TIM_OC1_SetConfig+0xd2>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a1b      	ldr	r2, [pc, #108]	; (8003368 <TIM_OC1_SetConfig+0x124>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d00b      	beq.n	8003316 <TIM_OC1_SetConfig+0xd2>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a1a      	ldr	r2, [pc, #104]	; (800336c <TIM_OC1_SetConfig+0x128>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d007      	beq.n	8003316 <TIM_OC1_SetConfig+0xd2>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a19      	ldr	r2, [pc, #100]	; (8003370 <TIM_OC1_SetConfig+0x12c>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d003      	beq.n	8003316 <TIM_OC1_SetConfig+0xd2>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a18      	ldr	r2, [pc, #96]	; (8003374 <TIM_OC1_SetConfig+0x130>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d111      	bne.n	800333a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800331c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003324:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	4313      	orrs	r3, r2
 800332e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	4313      	orrs	r3, r2
 8003338:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	621a      	str	r2, [r3, #32]
}
 8003354:	bf00      	nop
 8003356:	371c      	adds	r7, #28
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	40012c00 	.word	0x40012c00
 8003364:	40013400 	.word	0x40013400
 8003368:	40014000 	.word	0x40014000
 800336c:	40014400 	.word	0x40014400
 8003370:	40014800 	.word	0x40014800
 8003374:	40015000 	.word	0x40015000

08003378 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003378:	b480      	push	{r7}
 800337a:	b087      	sub	sp, #28
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	f023 0210 	bic.w	r2, r3, #16
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	021b      	lsls	r3, r3, #8
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	4313      	orrs	r3, r2
 80033be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	f023 0320 	bic.w	r3, r3, #32
 80033c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	011b      	lsls	r3, r3, #4
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a2c      	ldr	r2, [pc, #176]	; (8003488 <TIM_OC2_SetConfig+0x110>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d007      	beq.n	80033ec <TIM_OC2_SetConfig+0x74>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a2b      	ldr	r2, [pc, #172]	; (800348c <TIM_OC2_SetConfig+0x114>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d003      	beq.n	80033ec <TIM_OC2_SetConfig+0x74>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a2a      	ldr	r2, [pc, #168]	; (8003490 <TIM_OC2_SetConfig+0x118>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d10d      	bne.n	8003408 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	011b      	lsls	r3, r3, #4
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003406:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a1f      	ldr	r2, [pc, #124]	; (8003488 <TIM_OC2_SetConfig+0x110>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d013      	beq.n	8003438 <TIM_OC2_SetConfig+0xc0>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a1e      	ldr	r2, [pc, #120]	; (800348c <TIM_OC2_SetConfig+0x114>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d00f      	beq.n	8003438 <TIM_OC2_SetConfig+0xc0>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a1e      	ldr	r2, [pc, #120]	; (8003494 <TIM_OC2_SetConfig+0x11c>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d00b      	beq.n	8003438 <TIM_OC2_SetConfig+0xc0>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a1d      	ldr	r2, [pc, #116]	; (8003498 <TIM_OC2_SetConfig+0x120>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d007      	beq.n	8003438 <TIM_OC2_SetConfig+0xc0>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a1c      	ldr	r2, [pc, #112]	; (800349c <TIM_OC2_SetConfig+0x124>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d003      	beq.n	8003438 <TIM_OC2_SetConfig+0xc0>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a17      	ldr	r2, [pc, #92]	; (8003490 <TIM_OC2_SetConfig+0x118>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d113      	bne.n	8003460 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800343e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003446:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	695b      	ldr	r3, [r3, #20]
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	4313      	orrs	r3, r2
 8003452:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	4313      	orrs	r3, r2
 800345e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	621a      	str	r2, [r3, #32]
}
 800347a:	bf00      	nop
 800347c:	371c      	adds	r7, #28
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	40012c00 	.word	0x40012c00
 800348c:	40013400 	.word	0x40013400
 8003490:	40015000 	.word	0x40015000
 8003494:	40014000 	.word	0x40014000
 8003498:	40014400 	.word	0x40014400
 800349c:	40014800 	.word	0x40014800

080034a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b087      	sub	sp, #28
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f023 0303 	bic.w	r3, r3, #3
 80034da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	021b      	lsls	r3, r3, #8
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a2b      	ldr	r2, [pc, #172]	; (80035ac <TIM_OC3_SetConfig+0x10c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d007      	beq.n	8003512 <TIM_OC3_SetConfig+0x72>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a2a      	ldr	r2, [pc, #168]	; (80035b0 <TIM_OC3_SetConfig+0x110>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d003      	beq.n	8003512 <TIM_OC3_SetConfig+0x72>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a29      	ldr	r2, [pc, #164]	; (80035b4 <TIM_OC3_SetConfig+0x114>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d10d      	bne.n	800352e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003518:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	021b      	lsls	r3, r3, #8
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	4313      	orrs	r3, r2
 8003524:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800352c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a1e      	ldr	r2, [pc, #120]	; (80035ac <TIM_OC3_SetConfig+0x10c>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d013      	beq.n	800355e <TIM_OC3_SetConfig+0xbe>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a1d      	ldr	r2, [pc, #116]	; (80035b0 <TIM_OC3_SetConfig+0x110>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d00f      	beq.n	800355e <TIM_OC3_SetConfig+0xbe>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a1d      	ldr	r2, [pc, #116]	; (80035b8 <TIM_OC3_SetConfig+0x118>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d00b      	beq.n	800355e <TIM_OC3_SetConfig+0xbe>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a1c      	ldr	r2, [pc, #112]	; (80035bc <TIM_OC3_SetConfig+0x11c>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d007      	beq.n	800355e <TIM_OC3_SetConfig+0xbe>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a1b      	ldr	r2, [pc, #108]	; (80035c0 <TIM_OC3_SetConfig+0x120>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d003      	beq.n	800355e <TIM_OC3_SetConfig+0xbe>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a16      	ldr	r2, [pc, #88]	; (80035b4 <TIM_OC3_SetConfig+0x114>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d113      	bne.n	8003586 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003564:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800356c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	011b      	lsls	r3, r3, #4
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	4313      	orrs	r3, r2
 8003578:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	011b      	lsls	r3, r3, #4
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	4313      	orrs	r3, r2
 8003584:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	621a      	str	r2, [r3, #32]
}
 80035a0:	bf00      	nop
 80035a2:	371c      	adds	r7, #28
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr
 80035ac:	40012c00 	.word	0x40012c00
 80035b0:	40013400 	.word	0x40013400
 80035b4:	40015000 	.word	0x40015000
 80035b8:	40014000 	.word	0x40014000
 80035bc:	40014400 	.word	0x40014400
 80035c0:	40014800 	.word	0x40014800

080035c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b087      	sub	sp, #28
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	021b      	lsls	r3, r3, #8
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	4313      	orrs	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003612:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	031b      	lsls	r3, r3, #12
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	4313      	orrs	r3, r2
 800361e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a1a      	ldr	r2, [pc, #104]	; (800368c <TIM_OC4_SetConfig+0xc8>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d013      	beq.n	8003650 <TIM_OC4_SetConfig+0x8c>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a19      	ldr	r2, [pc, #100]	; (8003690 <TIM_OC4_SetConfig+0xcc>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d00f      	beq.n	8003650 <TIM_OC4_SetConfig+0x8c>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a18      	ldr	r2, [pc, #96]	; (8003694 <TIM_OC4_SetConfig+0xd0>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d00b      	beq.n	8003650 <TIM_OC4_SetConfig+0x8c>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a17      	ldr	r2, [pc, #92]	; (8003698 <TIM_OC4_SetConfig+0xd4>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d007      	beq.n	8003650 <TIM_OC4_SetConfig+0x8c>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a16      	ldr	r2, [pc, #88]	; (800369c <TIM_OC4_SetConfig+0xd8>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d003      	beq.n	8003650 <TIM_OC4_SetConfig+0x8c>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a15      	ldr	r2, [pc, #84]	; (80036a0 <TIM_OC4_SetConfig+0xdc>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d109      	bne.n	8003664 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003656:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	019b      	lsls	r3, r3, #6
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	4313      	orrs	r3, r2
 8003662:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	621a      	str	r2, [r3, #32]
}
 800367e:	bf00      	nop
 8003680:	371c      	adds	r7, #28
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	40012c00 	.word	0x40012c00
 8003690:	40013400 	.word	0x40013400
 8003694:	40014000 	.word	0x40014000
 8003698:	40014400 	.word	0x40014400
 800369c:	40014800 	.word	0x40014800
 80036a0:	40015000 	.word	0x40015000

080036a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b087      	sub	sp, #28
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	4313      	orrs	r3, r2
 80036e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80036e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	041b      	lsls	r3, r3, #16
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a19      	ldr	r2, [pc, #100]	; (8003760 <TIM_OC5_SetConfig+0xbc>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d013      	beq.n	8003726 <TIM_OC5_SetConfig+0x82>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a18      	ldr	r2, [pc, #96]	; (8003764 <TIM_OC5_SetConfig+0xc0>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d00f      	beq.n	8003726 <TIM_OC5_SetConfig+0x82>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a17      	ldr	r2, [pc, #92]	; (8003768 <TIM_OC5_SetConfig+0xc4>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d00b      	beq.n	8003726 <TIM_OC5_SetConfig+0x82>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a16      	ldr	r2, [pc, #88]	; (800376c <TIM_OC5_SetConfig+0xc8>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d007      	beq.n	8003726 <TIM_OC5_SetConfig+0x82>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a15      	ldr	r2, [pc, #84]	; (8003770 <TIM_OC5_SetConfig+0xcc>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d003      	beq.n	8003726 <TIM_OC5_SetConfig+0x82>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a14      	ldr	r2, [pc, #80]	; (8003774 <TIM_OC5_SetConfig+0xd0>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d109      	bne.n	800373a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800372c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	021b      	lsls	r3, r3, #8
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	4313      	orrs	r3, r2
 8003738:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	621a      	str	r2, [r3, #32]
}
 8003754:	bf00      	nop
 8003756:	371c      	adds	r7, #28
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr
 8003760:	40012c00 	.word	0x40012c00
 8003764:	40013400 	.word	0x40013400
 8003768:	40014000 	.word	0x40014000
 800376c:	40014400 	.word	0x40014400
 8003770:	40014800 	.word	0x40014800
 8003774:	40015000 	.word	0x40015000

08003778 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003778:	b480      	push	{r7}
 800377a:	b087      	sub	sp, #28
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800379e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	021b      	lsls	r3, r3, #8
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80037be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	051b      	lsls	r3, r3, #20
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a1a      	ldr	r2, [pc, #104]	; (8003838 <TIM_OC6_SetConfig+0xc0>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d013      	beq.n	80037fc <TIM_OC6_SetConfig+0x84>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a19      	ldr	r2, [pc, #100]	; (800383c <TIM_OC6_SetConfig+0xc4>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d00f      	beq.n	80037fc <TIM_OC6_SetConfig+0x84>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a18      	ldr	r2, [pc, #96]	; (8003840 <TIM_OC6_SetConfig+0xc8>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d00b      	beq.n	80037fc <TIM_OC6_SetConfig+0x84>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a17      	ldr	r2, [pc, #92]	; (8003844 <TIM_OC6_SetConfig+0xcc>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d007      	beq.n	80037fc <TIM_OC6_SetConfig+0x84>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a16      	ldr	r2, [pc, #88]	; (8003848 <TIM_OC6_SetConfig+0xd0>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d003      	beq.n	80037fc <TIM_OC6_SetConfig+0x84>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a15      	ldr	r2, [pc, #84]	; (800384c <TIM_OC6_SetConfig+0xd4>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d109      	bne.n	8003810 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003802:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	029b      	lsls	r3, r3, #10
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	4313      	orrs	r3, r2
 800380e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685a      	ldr	r2, [r3, #4]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	621a      	str	r2, [r3, #32]
}
 800382a:	bf00      	nop
 800382c:	371c      	adds	r7, #28
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	40012c00 	.word	0x40012c00
 800383c:	40013400 	.word	0x40013400
 8003840:	40014000 	.word	0x40014000
 8003844:	40014400 	.word	0x40014400
 8003848:	40014800 	.word	0x40014800
 800384c:	40015000 	.word	0x40015000

08003850 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003850:	b480      	push	{r7}
 8003852:	b087      	sub	sp, #28
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	f023 0201 	bic.w	r2, r3, #1
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800387a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	011b      	lsls	r3, r3, #4
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	4313      	orrs	r3, r2
 8003884:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f023 030a 	bic.w	r3, r3, #10
 800388c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	4313      	orrs	r3, r2
 8003894:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	621a      	str	r2, [r3, #32]
}
 80038a2:	bf00      	nop
 80038a4:	371c      	adds	r7, #28
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr

080038ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038ae:	b480      	push	{r7}
 80038b0:	b087      	sub	sp, #28
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	60f8      	str	r0, [r7, #12]
 80038b6:	60b9      	str	r1, [r7, #8]
 80038b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	f023 0210 	bic.w	r2, r3, #16
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	031b      	lsls	r3, r3, #12
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	011b      	lsls	r3, r3, #4
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	621a      	str	r2, [r3, #32]
}
 8003902:	bf00      	nop
 8003904:	371c      	adds	r7, #28
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800390e:	b480      	push	{r7}
 8003910:	b085      	sub	sp, #20
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
 8003916:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003924:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	4313      	orrs	r3, r2
 800392c:	f043 0307 	orr.w	r3, r3, #7
 8003930:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	609a      	str	r2, [r3, #8]
}
 8003938:	bf00      	nop
 800393a:	3714      	adds	r7, #20
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003944:	b480      	push	{r7}
 8003946:	b087      	sub	sp, #28
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
 8003950:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800395e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	021a      	lsls	r2, r3, #8
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	431a      	orrs	r2, r3
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	4313      	orrs	r3, r2
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	4313      	orrs	r3, r2
 8003970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	609a      	str	r2, [r3, #8]
}
 8003978:	bf00      	nop
 800397a:	371c      	adds	r7, #28
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003984:	b480      	push	{r7}
 8003986:	b087      	sub	sp, #28
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	f003 031f 	and.w	r3, r3, #31
 8003996:	2201      	movs	r2, #1
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6a1a      	ldr	r2, [r3, #32]
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	43db      	mvns	r3, r3
 80039a6:	401a      	ands	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6a1a      	ldr	r2, [r3, #32]
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	f003 031f 	and.w	r3, r3, #31
 80039b6:	6879      	ldr	r1, [r7, #4]
 80039b8:	fa01 f303 	lsl.w	r3, r1, r3
 80039bc:	431a      	orrs	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	621a      	str	r2, [r3, #32]
}
 80039c2:	bf00      	nop
 80039c4:	371c      	adds	r7, #28
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
	...

080039d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d101      	bne.n	80039e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039e4:	2302      	movs	r3, #2
 80039e6:	e06d      	b.n	8003ac4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2202      	movs	r2, #2
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a30      	ldr	r2, [pc, #192]	; (8003ad0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d009      	beq.n	8003a26 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a2f      	ldr	r2, [pc, #188]	; (8003ad4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d004      	beq.n	8003a26 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a2d      	ldr	r2, [pc, #180]	; (8003ad8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d108      	bne.n	8003a38 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003a2c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a1e      	ldr	r2, [pc, #120]	; (8003ad0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d01d      	beq.n	8003a98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a64:	d018      	beq.n	8003a98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a1c      	ldr	r2, [pc, #112]	; (8003adc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d013      	beq.n	8003a98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a1a      	ldr	r2, [pc, #104]	; (8003ae0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d00e      	beq.n	8003a98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a15      	ldr	r2, [pc, #84]	; (8003ad4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d009      	beq.n	8003a98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a16      	ldr	r2, [pc, #88]	; (8003ae4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d004      	beq.n	8003a98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a11      	ldr	r2, [pc, #68]	; (8003ad8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d10c      	bne.n	8003ab2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a9e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	68ba      	ldr	r2, [r7, #8]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68ba      	ldr	r2, [r7, #8]
 8003ab0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3714      	adds	r7, #20
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr
 8003ad0:	40012c00 	.word	0x40012c00
 8003ad4:	40013400 	.word	0x40013400
 8003ad8:	40015000 	.word	0x40015000
 8003adc:	40000400 	.word	0x40000400
 8003ae0:	40000800 	.word	0x40000800
 8003ae4:	40014000 	.word	0x40014000

08003ae8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e040      	b.n	8003b7c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d106      	bne.n	8003b10 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7fc ff86 	bl	8000a1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2224      	movs	r2, #36	; 0x24
 8003b14:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 0201 	bic.w	r2, r2, #1
 8003b24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 fb1e 	bl	8004168 <UART_SetConfig>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d101      	bne.n	8003b36 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e022      	b.n	8003b7c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d002      	beq.n	8003b44 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 fce6 	bl	8004510 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689a      	ldr	r2, [r3, #8]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0201 	orr.w	r2, r2, #1
 8003b72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 fd6d 	bl	8004654 <UART_CheckIdleState>
 8003b7a:	4603      	mov	r3, r0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b08a      	sub	sp, #40	; 0x28
 8003b88:	af02      	add	r7, sp, #8
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	603b      	str	r3, [r7, #0]
 8003b90:	4613      	mov	r3, r2
 8003b92:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b98:	2b20      	cmp	r3, #32
 8003b9a:	f040 8082 	bne.w	8003ca2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d002      	beq.n	8003baa <HAL_UART_Transmit+0x26>
 8003ba4:	88fb      	ldrh	r3, [r7, #6]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e07a      	b.n	8003ca4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d101      	bne.n	8003bbc <HAL_UART_Transmit+0x38>
 8003bb8:	2302      	movs	r3, #2
 8003bba:	e073      	b.n	8003ca4 <HAL_UART_Transmit+0x120>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2221      	movs	r2, #33	; 0x21
 8003bd0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bd2:	f7fd f86b 	bl	8000cac <HAL_GetTick>
 8003bd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	88fa      	ldrh	r2, [r7, #6]
 8003bdc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	88fa      	ldrh	r2, [r7, #6]
 8003be4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bf0:	d108      	bne.n	8003c04 <HAL_UART_Transmit+0x80>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d104      	bne.n	8003c04 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	61bb      	str	r3, [r7, #24]
 8003c02:	e003      	b.n	8003c0c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003c14:	e02d      	b.n	8003c72 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	9300      	str	r3, [sp, #0]
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	2180      	movs	r1, #128	; 0x80
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f000 fd60 	bl	80046e6 <UART_WaitOnFlagUntilTimeout>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d001      	beq.n	8003c30 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e039      	b.n	8003ca4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10b      	bne.n	8003c4e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	881a      	ldrh	r2, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c42:	b292      	uxth	r2, r2
 8003c44:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	3302      	adds	r3, #2
 8003c4a:	61bb      	str	r3, [r7, #24]
 8003c4c:	e008      	b.n	8003c60 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	781a      	ldrb	r2, [r3, #0]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	b292      	uxth	r2, r2
 8003c58:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1cb      	bne.n	8003c16 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	2200      	movs	r2, #0
 8003c86:	2140      	movs	r1, #64	; 0x40
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f000 fd2c 	bl	80046e6 <UART_WaitOnFlagUntilTimeout>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e005      	b.n	8003ca4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	e000      	b.n	8003ca4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003ca2:	2302      	movs	r3, #2
  }
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3720      	adds	r7, #32
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cbe:	2b20      	cmp	r3, #32
 8003cc0:	d12c      	bne.n	8003d1c <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d002      	beq.n	8003cce <HAL_UART_Receive_IT+0x22>
 8003cc8:	88fb      	ldrh	r3, [r7, #6]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e025      	b.n	8003d1e <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d101      	bne.n	8003ce0 <HAL_UART_Receive_IT+0x34>
 8003cdc:	2302      	movs	r3, #2
 8003cde:	e01e      	b.n	8003d1e <HAL_UART_Receive_IT+0x72>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d007      	beq.n	8003d0c <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003d0a:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003d0c:	88fb      	ldrh	r3, [r7, #6]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	68b9      	ldr	r1, [r7, #8]
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f000 fd64 	bl	80047e0 <UART_Start_Receive_IT>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	e000      	b.n	8003d1e <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003d1c:	2302      	movs	r3, #2
  }
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
	...

08003d28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b088      	sub	sp, #32
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003d48:	69fa      	ldr	r2, [r7, #28]
 8003d4a:	f640 030f 	movw	r3, #2063	; 0x80f
 8003d4e:	4013      	ands	r3, r2
 8003d50:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d113      	bne.n	8003d80 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	f003 0320 	and.w	r3, r3, #32
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00e      	beq.n	8003d80 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	f003 0320 	and.w	r3, r3, #32
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d009      	beq.n	8003d80 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 81cd 	beq.w	8004110 <HAL_UART_IRQHandler+0x3e8>
      {
        huart->RxISR(huart);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	4798      	blx	r3
      }
      return;
 8003d7e:	e1c7      	b.n	8004110 <HAL_UART_IRQHandler+0x3e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 80e3 	beq.w	8003f4e <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d105      	bne.n	8003d9e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	4ba5      	ldr	r3, [pc, #660]	; (800402c <HAL_UART_IRQHandler+0x304>)
 8003d96:	4013      	ands	r3, r2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 80d8 	beq.w	8003f4e <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	f003 0301 	and.w	r3, r3, #1
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d010      	beq.n	8003dca <HAL_UART_IRQHandler+0xa2>
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00b      	beq.n	8003dca <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2201      	movs	r2, #1
 8003db8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dc0:	f043 0201 	orr.w	r2, r3, #1
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d010      	beq.n	8003df6 <HAL_UART_IRQHandler+0xce>
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00b      	beq.n	8003df6 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2202      	movs	r2, #2
 8003de4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dec:	f043 0204 	orr.w	r2, r3, #4
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	f003 0304 	and.w	r3, r3, #4
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d010      	beq.n	8003e22 <HAL_UART_IRQHandler+0xfa>
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00b      	beq.n	8003e22 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2204      	movs	r2, #4
 8003e10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e18:	f043 0202 	orr.w	r2, r3, #2
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	f003 0308 	and.w	r3, r3, #8
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d015      	beq.n	8003e58 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	f003 0320 	and.w	r3, r3, #32
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d104      	bne.n	8003e40 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00b      	beq.n	8003e58 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2208      	movs	r2, #8
 8003e46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e4e:	f043 0208 	orr.w	r2, r3, #8
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d011      	beq.n	8003e86 <HAL_UART_IRQHandler+0x15e>
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00c      	beq.n	8003e86 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e7c:	f043 0220 	orr.w	r2, r3, #32
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f000 8141 	beq.w	8004114 <HAL_UART_IRQHandler+0x3ec>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	f003 0320 	and.w	r3, r3, #32
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00c      	beq.n	8003eb6 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	f003 0320 	and.w	r3, r3, #32
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d007      	beq.n	8003eb6 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ebc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec8:	2b40      	cmp	r3, #64	; 0x40
 8003eca:	d004      	beq.n	8003ed6 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d031      	beq.n	8003f3a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 fd0a 	bl	80048f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee6:	2b40      	cmp	r3, #64	; 0x40
 8003ee8:	d123      	bne.n	8003f32 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ef8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d013      	beq.n	8003f2a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f06:	4a4a      	ldr	r2, [pc, #296]	; (8004030 <HAL_UART_IRQHandler+0x308>)
 8003f08:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7fd f822 	bl	8000f58 <HAL_DMA_Abort_IT>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d017      	beq.n	8003f4a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003f24:	4610      	mov	r0, r2
 8003f26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f28:	e00f      	b.n	8003f4a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f906 	bl	800413c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f30:	e00b      	b.n	8003f4a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f902 	bl	800413c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f38:	e007      	b.n	8003f4a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f8fe 	bl	800413c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003f48:	e0e4      	b.n	8004114 <HAL_UART_IRQHandler+0x3ec>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f4a:	bf00      	nop
    return;
 8003f4c:	e0e2      	b.n	8004114 <HAL_UART_IRQHandler+0x3ec>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	f040 80a7 	bne.w	80040a6 <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	f003 0310 	and.w	r3, r3, #16
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 80a1 	beq.w	80040a6 <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	f003 0310 	and.w	r3, r3, #16
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f000 809b 	beq.w	80040a6 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2210      	movs	r2, #16
 8003f76:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f82:	2b40      	cmp	r3, #64	; 0x40
 8003f84:	d156      	bne.n	8004034 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8003f90:	893b      	ldrh	r3, [r7, #8]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f000 80c0 	beq.w	8004118 <HAL_UART_IRQHandler+0x3f0>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003f9e:	893a      	ldrh	r2, [r7, #8]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	f080 80b9 	bcs.w	8004118 <HAL_UART_IRQHandler+0x3f0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	893a      	ldrh	r2, [r7, #8]
 8003faa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	2b20      	cmp	r3, #32
 8003fb6:	d02a      	beq.n	800400e <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fc6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689a      	ldr	r2, [r3, #8]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 0201 	bic.w	r2, r2, #1
 8003fd6:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	689a      	ldr	r2, [r3, #8]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fe6:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2220      	movs	r2, #32
 8003fec:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 0210 	bic.w	r2, r2, #16
 8004002:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004008:	4618      	mov	r0, r3
 800400a:	f7fc ff6c 	bl	8000ee6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800401a:	b29b      	uxth	r3, r3
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	b29b      	uxth	r3, r3
 8004020:	4619      	mov	r1, r3
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f894 	bl	8004150 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004028:	e076      	b.n	8004118 <HAL_UART_IRQHandler+0x3f0>
 800402a:	bf00      	nop
 800402c:	04000120 	.word	0x04000120
 8004030:	0800494f 	.word	0x0800494f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004040:	b29b      	uxth	r3, r3
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800404c:	b29b      	uxth	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d064      	beq.n	800411c <HAL_UART_IRQHandler+0x3f4>
          &&(nb_rx_data > 0U) )
 8004052:	897b      	ldrh	r3, [r7, #10]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d061      	beq.n	800411c <HAL_UART_IRQHandler+0x3f4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004066:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689a      	ldr	r2, [r3, #8]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 0201 	bic.w	r2, r2, #1
 8004076:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2220      	movs	r2, #32
 800407c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 0210 	bic.w	r2, r2, #16
 8004098:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800409a:	897b      	ldrh	r3, [r7, #10]
 800409c:	4619      	mov	r1, r3
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f856 	bl	8004150 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80040a4:	e03a      	b.n	800411c <HAL_UART_IRQHandler+0x3f4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00d      	beq.n	80040cc <HAL_UART_IRQHandler+0x3a4>
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d008      	beq.n	80040cc <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80040c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 fd45 	bl	8004b54 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80040ca:	e02a      	b.n	8004122 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00d      	beq.n	80040f2 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d008      	beq.n	80040f2 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d01b      	beq.n	8004120 <HAL_UART_IRQHandler+0x3f8>
    {
      huart->TxISR(huart);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	4798      	blx	r3
    }
    return;
 80040f0:	e016      	b.n	8004120 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d012      	beq.n	8004122 <HAL_UART_IRQHandler+0x3fa>
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00d      	beq.n	8004122 <HAL_UART_IRQHandler+0x3fa>
  {
    UART_EndTransmit_IT(huart);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 fc37 	bl	800497a <UART_EndTransmit_IT>
    return;
 800410c:	bf00      	nop
 800410e:	e008      	b.n	8004122 <HAL_UART_IRQHandler+0x3fa>
      return;
 8004110:	bf00      	nop
 8004112:	e006      	b.n	8004122 <HAL_UART_IRQHandler+0x3fa>
    return;
 8004114:	bf00      	nop
 8004116:	e004      	b.n	8004122 <HAL_UART_IRQHandler+0x3fa>
      return;
 8004118:	bf00      	nop
 800411a:	e002      	b.n	8004122 <HAL_UART_IRQHandler+0x3fa>
      return;
 800411c:	bf00      	nop
 800411e:	e000      	b.n	8004122 <HAL_UART_IRQHandler+0x3fa>
    return;
 8004120:	bf00      	nop
  }

}
 8004122:	3720      	adds	r7, #32
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	460b      	mov	r3, r1
 800415a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b088      	sub	sp, #32
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004170:	2300      	movs	r3, #0
 8004172:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	431a      	orrs	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	431a      	orrs	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	69db      	ldr	r3, [r3, #28]
 8004188:	4313      	orrs	r3, r2
 800418a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	4baa      	ldr	r3, [pc, #680]	; (800443c <UART_SetConfig+0x2d4>)
 8004194:	4013      	ands	r3, r2
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	6812      	ldr	r2, [r2, #0]
 800419a:	6979      	ldr	r1, [r7, #20]
 800419c:	430b      	orrs	r3, r1
 800419e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68da      	ldr	r2, [r3, #12]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a98      	ldr	r2, [pc, #608]	; (8004440 <UART_SetConfig+0x2d8>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d121      	bne.n	8004228 <UART_SetConfig+0xc0>
 80041e4:	4b97      	ldr	r3, [pc, #604]	; (8004444 <UART_SetConfig+0x2dc>)
 80041e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e8:	f003 0303 	and.w	r3, r3, #3
 80041ec:	2b03      	cmp	r3, #3
 80041ee:	d817      	bhi.n	8004220 <UART_SetConfig+0xb8>
 80041f0:	a201      	add	r2, pc, #4	; (adr r2, 80041f8 <UART_SetConfig+0x90>)
 80041f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f6:	bf00      	nop
 80041f8:	08004209 	.word	0x08004209
 80041fc:	08004215 	.word	0x08004215
 8004200:	0800421b 	.word	0x0800421b
 8004204:	0800420f 	.word	0x0800420f
 8004208:	2301      	movs	r3, #1
 800420a:	77fb      	strb	r3, [r7, #31]
 800420c:	e0b2      	b.n	8004374 <UART_SetConfig+0x20c>
 800420e:	2302      	movs	r3, #2
 8004210:	77fb      	strb	r3, [r7, #31]
 8004212:	e0af      	b.n	8004374 <UART_SetConfig+0x20c>
 8004214:	2304      	movs	r3, #4
 8004216:	77fb      	strb	r3, [r7, #31]
 8004218:	e0ac      	b.n	8004374 <UART_SetConfig+0x20c>
 800421a:	2308      	movs	r3, #8
 800421c:	77fb      	strb	r3, [r7, #31]
 800421e:	e0a9      	b.n	8004374 <UART_SetConfig+0x20c>
 8004220:	2310      	movs	r3, #16
 8004222:	77fb      	strb	r3, [r7, #31]
 8004224:	bf00      	nop
 8004226:	e0a5      	b.n	8004374 <UART_SetConfig+0x20c>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a86      	ldr	r2, [pc, #536]	; (8004448 <UART_SetConfig+0x2e0>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d123      	bne.n	800427a <UART_SetConfig+0x112>
 8004232:	4b84      	ldr	r3, [pc, #528]	; (8004444 <UART_SetConfig+0x2dc>)
 8004234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004236:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800423a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800423e:	d012      	beq.n	8004266 <UART_SetConfig+0xfe>
 8004240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004244:	d802      	bhi.n	800424c <UART_SetConfig+0xe4>
 8004246:	2b00      	cmp	r3, #0
 8004248:	d007      	beq.n	800425a <UART_SetConfig+0xf2>
 800424a:	e012      	b.n	8004272 <UART_SetConfig+0x10a>
 800424c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004250:	d00c      	beq.n	800426c <UART_SetConfig+0x104>
 8004252:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004256:	d003      	beq.n	8004260 <UART_SetConfig+0xf8>
 8004258:	e00b      	b.n	8004272 <UART_SetConfig+0x10a>
 800425a:	2300      	movs	r3, #0
 800425c:	77fb      	strb	r3, [r7, #31]
 800425e:	e089      	b.n	8004374 <UART_SetConfig+0x20c>
 8004260:	2302      	movs	r3, #2
 8004262:	77fb      	strb	r3, [r7, #31]
 8004264:	e086      	b.n	8004374 <UART_SetConfig+0x20c>
 8004266:	2304      	movs	r3, #4
 8004268:	77fb      	strb	r3, [r7, #31]
 800426a:	e083      	b.n	8004374 <UART_SetConfig+0x20c>
 800426c:	2308      	movs	r3, #8
 800426e:	77fb      	strb	r3, [r7, #31]
 8004270:	e080      	b.n	8004374 <UART_SetConfig+0x20c>
 8004272:	2310      	movs	r3, #16
 8004274:	77fb      	strb	r3, [r7, #31]
 8004276:	bf00      	nop
 8004278:	e07c      	b.n	8004374 <UART_SetConfig+0x20c>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a73      	ldr	r2, [pc, #460]	; (800444c <UART_SetConfig+0x2e4>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d123      	bne.n	80042cc <UART_SetConfig+0x164>
 8004284:	4b6f      	ldr	r3, [pc, #444]	; (8004444 <UART_SetConfig+0x2dc>)
 8004286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004288:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800428c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004290:	d012      	beq.n	80042b8 <UART_SetConfig+0x150>
 8004292:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004296:	d802      	bhi.n	800429e <UART_SetConfig+0x136>
 8004298:	2b00      	cmp	r3, #0
 800429a:	d007      	beq.n	80042ac <UART_SetConfig+0x144>
 800429c:	e012      	b.n	80042c4 <UART_SetConfig+0x15c>
 800429e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80042a2:	d00c      	beq.n	80042be <UART_SetConfig+0x156>
 80042a4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80042a8:	d003      	beq.n	80042b2 <UART_SetConfig+0x14a>
 80042aa:	e00b      	b.n	80042c4 <UART_SetConfig+0x15c>
 80042ac:	2300      	movs	r3, #0
 80042ae:	77fb      	strb	r3, [r7, #31]
 80042b0:	e060      	b.n	8004374 <UART_SetConfig+0x20c>
 80042b2:	2302      	movs	r3, #2
 80042b4:	77fb      	strb	r3, [r7, #31]
 80042b6:	e05d      	b.n	8004374 <UART_SetConfig+0x20c>
 80042b8:	2304      	movs	r3, #4
 80042ba:	77fb      	strb	r3, [r7, #31]
 80042bc:	e05a      	b.n	8004374 <UART_SetConfig+0x20c>
 80042be:	2308      	movs	r3, #8
 80042c0:	77fb      	strb	r3, [r7, #31]
 80042c2:	e057      	b.n	8004374 <UART_SetConfig+0x20c>
 80042c4:	2310      	movs	r3, #16
 80042c6:	77fb      	strb	r3, [r7, #31]
 80042c8:	bf00      	nop
 80042ca:	e053      	b.n	8004374 <UART_SetConfig+0x20c>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a5f      	ldr	r2, [pc, #380]	; (8004450 <UART_SetConfig+0x2e8>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d123      	bne.n	800431e <UART_SetConfig+0x1b6>
 80042d6:	4b5b      	ldr	r3, [pc, #364]	; (8004444 <UART_SetConfig+0x2dc>)
 80042d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042da:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80042de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042e2:	d012      	beq.n	800430a <UART_SetConfig+0x1a2>
 80042e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042e8:	d802      	bhi.n	80042f0 <UART_SetConfig+0x188>
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d007      	beq.n	80042fe <UART_SetConfig+0x196>
 80042ee:	e012      	b.n	8004316 <UART_SetConfig+0x1ae>
 80042f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042f4:	d00c      	beq.n	8004310 <UART_SetConfig+0x1a8>
 80042f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80042fa:	d003      	beq.n	8004304 <UART_SetConfig+0x19c>
 80042fc:	e00b      	b.n	8004316 <UART_SetConfig+0x1ae>
 80042fe:	2300      	movs	r3, #0
 8004300:	77fb      	strb	r3, [r7, #31]
 8004302:	e037      	b.n	8004374 <UART_SetConfig+0x20c>
 8004304:	2302      	movs	r3, #2
 8004306:	77fb      	strb	r3, [r7, #31]
 8004308:	e034      	b.n	8004374 <UART_SetConfig+0x20c>
 800430a:	2304      	movs	r3, #4
 800430c:	77fb      	strb	r3, [r7, #31]
 800430e:	e031      	b.n	8004374 <UART_SetConfig+0x20c>
 8004310:	2308      	movs	r3, #8
 8004312:	77fb      	strb	r3, [r7, #31]
 8004314:	e02e      	b.n	8004374 <UART_SetConfig+0x20c>
 8004316:	2310      	movs	r3, #16
 8004318:	77fb      	strb	r3, [r7, #31]
 800431a:	bf00      	nop
 800431c:	e02a      	b.n	8004374 <UART_SetConfig+0x20c>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a4c      	ldr	r2, [pc, #304]	; (8004454 <UART_SetConfig+0x2ec>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d123      	bne.n	8004370 <UART_SetConfig+0x208>
 8004328:	4b46      	ldr	r3, [pc, #280]	; (8004444 <UART_SetConfig+0x2dc>)
 800432a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004330:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004334:	d012      	beq.n	800435c <UART_SetConfig+0x1f4>
 8004336:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800433a:	d802      	bhi.n	8004342 <UART_SetConfig+0x1da>
 800433c:	2b00      	cmp	r3, #0
 800433e:	d007      	beq.n	8004350 <UART_SetConfig+0x1e8>
 8004340:	e012      	b.n	8004368 <UART_SetConfig+0x200>
 8004342:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004346:	d00c      	beq.n	8004362 <UART_SetConfig+0x1fa>
 8004348:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800434c:	d003      	beq.n	8004356 <UART_SetConfig+0x1ee>
 800434e:	e00b      	b.n	8004368 <UART_SetConfig+0x200>
 8004350:	2300      	movs	r3, #0
 8004352:	77fb      	strb	r3, [r7, #31]
 8004354:	e00e      	b.n	8004374 <UART_SetConfig+0x20c>
 8004356:	2302      	movs	r3, #2
 8004358:	77fb      	strb	r3, [r7, #31]
 800435a:	e00b      	b.n	8004374 <UART_SetConfig+0x20c>
 800435c:	2304      	movs	r3, #4
 800435e:	77fb      	strb	r3, [r7, #31]
 8004360:	e008      	b.n	8004374 <UART_SetConfig+0x20c>
 8004362:	2308      	movs	r3, #8
 8004364:	77fb      	strb	r3, [r7, #31]
 8004366:	e005      	b.n	8004374 <UART_SetConfig+0x20c>
 8004368:	2310      	movs	r3, #16
 800436a:	77fb      	strb	r3, [r7, #31]
 800436c:	bf00      	nop
 800436e:	e001      	b.n	8004374 <UART_SetConfig+0x20c>
 8004370:	2310      	movs	r3, #16
 8004372:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	69db      	ldr	r3, [r3, #28]
 8004378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800437c:	d16e      	bne.n	800445c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800437e:	7ffb      	ldrb	r3, [r7, #31]
 8004380:	2b08      	cmp	r3, #8
 8004382:	d828      	bhi.n	80043d6 <UART_SetConfig+0x26e>
 8004384:	a201      	add	r2, pc, #4	; (adr r2, 800438c <UART_SetConfig+0x224>)
 8004386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438a:	bf00      	nop
 800438c:	080043b1 	.word	0x080043b1
 8004390:	080043b9 	.word	0x080043b9
 8004394:	080043c1 	.word	0x080043c1
 8004398:	080043d7 	.word	0x080043d7
 800439c:	080043c7 	.word	0x080043c7
 80043a0:	080043d7 	.word	0x080043d7
 80043a4:	080043d7 	.word	0x080043d7
 80043a8:	080043d7 	.word	0x080043d7
 80043ac:	080043cf 	.word	0x080043cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043b0:	f7fe f8ba 	bl	8002528 <HAL_RCC_GetPCLK1Freq>
 80043b4:	61b8      	str	r0, [r7, #24]
        break;
 80043b6:	e013      	b.n	80043e0 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043b8:	f7fe f8d8 	bl	800256c <HAL_RCC_GetPCLK2Freq>
 80043bc:	61b8      	str	r0, [r7, #24]
        break;
 80043be:	e00f      	b.n	80043e0 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043c0:	4b25      	ldr	r3, [pc, #148]	; (8004458 <UART_SetConfig+0x2f0>)
 80043c2:	61bb      	str	r3, [r7, #24]
        break;
 80043c4:	e00c      	b.n	80043e0 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043c6:	f7fe f839 	bl	800243c <HAL_RCC_GetSysClockFreq>
 80043ca:	61b8      	str	r0, [r7, #24]
        break;
 80043cc:	e008      	b.n	80043e0 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043d2:	61bb      	str	r3, [r7, #24]
        break;
 80043d4:	e004      	b.n	80043e0 <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 80043d6:	2300      	movs	r3, #0
 80043d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	77bb      	strb	r3, [r7, #30]
        break;
 80043de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f000 8086 	beq.w	80044f4 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	005a      	lsls	r2, r3, #1
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	085b      	lsrs	r3, r3, #1
 80043f2:	441a      	add	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	2b0f      	cmp	r3, #15
 8004404:	d916      	bls.n	8004434 <UART_SetConfig+0x2cc>
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800440c:	d212      	bcs.n	8004434 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	b29b      	uxth	r3, r3
 8004412:	f023 030f 	bic.w	r3, r3, #15
 8004416:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	085b      	lsrs	r3, r3, #1
 800441c:	b29b      	uxth	r3, r3
 800441e:	f003 0307 	and.w	r3, r3, #7
 8004422:	b29a      	uxth	r2, r3
 8004424:	89fb      	ldrh	r3, [r7, #14]
 8004426:	4313      	orrs	r3, r2
 8004428:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	89fa      	ldrh	r2, [r7, #14]
 8004430:	60da      	str	r2, [r3, #12]
 8004432:	e05f      	b.n	80044f4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	77bb      	strb	r3, [r7, #30]
 8004438:	e05c      	b.n	80044f4 <UART_SetConfig+0x38c>
 800443a:	bf00      	nop
 800443c:	efff69f3 	.word	0xefff69f3
 8004440:	40013800 	.word	0x40013800
 8004444:	40021000 	.word	0x40021000
 8004448:	40004400 	.word	0x40004400
 800444c:	40004800 	.word	0x40004800
 8004450:	40004c00 	.word	0x40004c00
 8004454:	40005000 	.word	0x40005000
 8004458:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 800445c:	7ffb      	ldrb	r3, [r7, #31]
 800445e:	2b08      	cmp	r3, #8
 8004460:	d827      	bhi.n	80044b2 <UART_SetConfig+0x34a>
 8004462:	a201      	add	r2, pc, #4	; (adr r2, 8004468 <UART_SetConfig+0x300>)
 8004464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004468:	0800448d 	.word	0x0800448d
 800446c:	08004495 	.word	0x08004495
 8004470:	0800449d 	.word	0x0800449d
 8004474:	080044b3 	.word	0x080044b3
 8004478:	080044a3 	.word	0x080044a3
 800447c:	080044b3 	.word	0x080044b3
 8004480:	080044b3 	.word	0x080044b3
 8004484:	080044b3 	.word	0x080044b3
 8004488:	080044ab 	.word	0x080044ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800448c:	f7fe f84c 	bl	8002528 <HAL_RCC_GetPCLK1Freq>
 8004490:	61b8      	str	r0, [r7, #24]
        break;
 8004492:	e013      	b.n	80044bc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004494:	f7fe f86a 	bl	800256c <HAL_RCC_GetPCLK2Freq>
 8004498:	61b8      	str	r0, [r7, #24]
        break;
 800449a:	e00f      	b.n	80044bc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800449c:	4b1b      	ldr	r3, [pc, #108]	; (800450c <UART_SetConfig+0x3a4>)
 800449e:	61bb      	str	r3, [r7, #24]
        break;
 80044a0:	e00c      	b.n	80044bc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044a2:	f7fd ffcb 	bl	800243c <HAL_RCC_GetSysClockFreq>
 80044a6:	61b8      	str	r0, [r7, #24]
        break;
 80044a8:	e008      	b.n	80044bc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044ae:	61bb      	str	r3, [r7, #24]
        break;
 80044b0:	e004      	b.n	80044bc <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80044b2:	2300      	movs	r3, #0
 80044b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	77bb      	strb	r3, [r7, #30]
        break;
 80044ba:	bf00      	nop
    }

    if (pclk != 0U)
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d018      	beq.n	80044f4 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	085a      	lsrs	r2, r3, #1
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	441a      	add	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	2b0f      	cmp	r3, #15
 80044dc:	d908      	bls.n	80044f0 <UART_SetConfig+0x388>
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044e4:	d204      	bcs.n	80044f0 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	60da      	str	r2, [r3, #12]
 80044ee:	e001      	b.n	80044f4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004500:	7fbb      	ldrb	r3, [r7, #30]
}
 8004502:	4618      	mov	r0, r3
 8004504:	3720      	adds	r7, #32
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	007a1200 	.word	0x007a1200

08004510 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	2b00      	cmp	r3, #0
 8004522:	d00a      	beq.n	800453a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	430a      	orrs	r2, r1
 8004538:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00a      	beq.n	800455c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	430a      	orrs	r2, r1
 800455a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	f003 0304 	and.w	r3, r3, #4
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00a      	beq.n	800457e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	430a      	orrs	r2, r1
 800457c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004582:	f003 0308 	and.w	r3, r3, #8
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00a      	beq.n	80045a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	430a      	orrs	r2, r1
 800459e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	f003 0310 	and.w	r3, r3, #16
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00a      	beq.n	80045c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c6:	f003 0320 	and.w	r3, r3, #32
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00a      	beq.n	80045e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	430a      	orrs	r2, r1
 80045e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d01a      	beq.n	8004626 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800460e:	d10a      	bne.n	8004626 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00a      	beq.n	8004648 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	605a      	str	r2, [r3, #4]
  }
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af02      	add	r7, sp, #8
 800465a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004664:	f7fc fb22 	bl	8000cac <HAL_GetTick>
 8004668:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0308 	and.w	r3, r3, #8
 8004674:	2b08      	cmp	r3, #8
 8004676:	d10e      	bne.n	8004696 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004678:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800467c:	9300      	str	r3, [sp, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 f82d 	bl	80046e6 <UART_WaitOnFlagUntilTimeout>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e023      	b.n	80046de <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0304 	and.w	r3, r3, #4
 80046a0:	2b04      	cmp	r3, #4
 80046a2:	d10e      	bne.n	80046c2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f817 	bl	80046e6 <UART_WaitOnFlagUntilTimeout>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e00d      	b.n	80046de <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2220      	movs	r2, #32
 80046c6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2220      	movs	r2, #32
 80046cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b084      	sub	sp, #16
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	60f8      	str	r0, [r7, #12]
 80046ee:	60b9      	str	r1, [r7, #8]
 80046f0:	603b      	str	r3, [r7, #0]
 80046f2:	4613      	mov	r3, r2
 80046f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046f6:	e05e      	b.n	80047b6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046fe:	d05a      	beq.n	80047b6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004700:	f7fc fad4 	bl	8000cac <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	429a      	cmp	r2, r3
 800470e:	d302      	bcc.n	8004716 <UART_WaitOnFlagUntilTimeout+0x30>
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d11b      	bne.n	800474e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004724:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	689a      	ldr	r2, [r3, #8]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 0201 	bic.w	r2, r2, #1
 8004734:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2220      	movs	r2, #32
 800473a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2220      	movs	r2, #32
 8004740:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e043      	b.n	80047d6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0304 	and.w	r3, r3, #4
 8004758:	2b00      	cmp	r3, #0
 800475a:	d02c      	beq.n	80047b6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004766:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800476a:	d124      	bne.n	80047b6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004774:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004784:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	689a      	ldr	r2, [r3, #8]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f022 0201 	bic.w	r2, r2, #1
 8004794:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2220      	movs	r2, #32
 800479a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2220      	movs	r2, #32
 80047a0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2220      	movs	r2, #32
 80047a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e00f      	b.n	80047d6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	69da      	ldr	r2, [r3, #28]
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	4013      	ands	r3, r2
 80047c0:	68ba      	ldr	r2, [r7, #8]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	bf0c      	ite	eq
 80047c6:	2301      	moveq	r3, #1
 80047c8:	2300      	movne	r3, #0
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	461a      	mov	r2, r3
 80047ce:	79fb      	ldrb	r3, [r7, #7]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d091      	beq.n	80046f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
	...

080047e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	4613      	mov	r3, r2
 80047ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	88fa      	ldrh	r2, [r7, #6]
 80047f8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	88fa      	ldrh	r2, [r7, #6]
 8004800:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004812:	d10e      	bne.n	8004832 <UART_Start_Receive_IT+0x52>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d105      	bne.n	8004828 <UART_Start_Receive_IT+0x48>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004822:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004826:	e02d      	b.n	8004884 <UART_Start_Receive_IT+0xa4>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	22ff      	movs	r2, #255	; 0xff
 800482c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004830:	e028      	b.n	8004884 <UART_Start_Receive_IT+0xa4>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10d      	bne.n	8004856 <UART_Start_Receive_IT+0x76>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d104      	bne.n	800484c <UART_Start_Receive_IT+0x6c>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	22ff      	movs	r2, #255	; 0xff
 8004846:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800484a:	e01b      	b.n	8004884 <UART_Start_Receive_IT+0xa4>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	227f      	movs	r2, #127	; 0x7f
 8004850:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004854:	e016      	b.n	8004884 <UART_Start_Receive_IT+0xa4>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800485e:	d10d      	bne.n	800487c <UART_Start_Receive_IT+0x9c>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d104      	bne.n	8004872 <UART_Start_Receive_IT+0x92>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	227f      	movs	r2, #127	; 0x7f
 800486c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004870:	e008      	b.n	8004884 <UART_Start_Receive_IT+0xa4>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	223f      	movs	r2, #63	; 0x3f
 8004876:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800487a:	e003      	b.n	8004884 <UART_Start_Receive_IT+0xa4>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2222      	movs	r2, #34	; 0x22
 8004890:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f042 0201 	orr.w	r2, r2, #1
 80048a0:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048aa:	d107      	bne.n	80048bc <UART_Start_Receive_IT+0xdc>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d103      	bne.n	80048bc <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	4a0c      	ldr	r2, [pc, #48]	; (80048e8 <UART_Start_Receive_IT+0x108>)
 80048b8:	665a      	str	r2, [r3, #100]	; 0x64
 80048ba:	e002      	b.n	80048c2 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	4a0b      	ldr	r2, [pc, #44]	; (80048ec <UART_Start_Receive_IT+0x10c>)
 80048c0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80048d8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr
 80048e8:	08004a81 	.word	0x08004a81
 80048ec:	080049ad 	.word	0x080049ad

080048f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004906:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689a      	ldr	r2, [r3, #8]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 0201 	bic.w	r2, r2, #1
 8004916:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800491c:	2b01      	cmp	r3, #1
 800491e:	d107      	bne.n	8004930 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 0210 	bic.w	r2, r2, #16
 800492e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2220      	movs	r2, #32
 8004934:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004942:	bf00      	nop
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b084      	sub	sp, #16
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f7ff fbe5 	bl	800413c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004972:	bf00      	nop
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b082      	sub	sp, #8
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004990:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2220      	movs	r2, #32
 8004996:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f7ff fbc2 	bl	8004128 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049a4:	bf00      	nop
 80049a6:	3708      	adds	r7, #8
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80049ba:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049c0:	2b22      	cmp	r3, #34	; 0x22
 80049c2:	d151      	bne.n	8004a68 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80049ca:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80049cc:	89bb      	ldrh	r3, [r7, #12]
 80049ce:	b2d9      	uxtb	r1, r3
 80049d0:	89fb      	ldrh	r3, [r7, #14]
 80049d2:	b2da      	uxtb	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d8:	400a      	ands	r2, r1
 80049da:	b2d2      	uxtb	r2, r2
 80049dc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e2:	1c5a      	adds	r2, r3, #1
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	3b01      	subs	r3, #1
 80049f2:	b29a      	uxth	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d138      	bne.n	8004a78 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004a14:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	689a      	ldr	r2, [r3, #8]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f022 0201 	bic.w	r2, r2, #1
 8004a24:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2220      	movs	r2, #32
 8004a2a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d10f      	bne.n	8004a5a <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f022 0210 	bic.w	r2, r2, #16
 8004a48:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004a50:	4619      	mov	r1, r3
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7ff fb7c 	bl	8004150 <HAL_UARTEx_RxEventCallback>
 8004a58:	e002      	b.n	8004a60 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f7fb fe12 	bl	8000684 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004a66:	e007      	b.n	8004a78 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	699a      	ldr	r2, [r3, #24]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f042 0208 	orr.w	r2, r2, #8
 8004a76:	619a      	str	r2, [r3, #24]
}
 8004a78:	bf00      	nop
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004a8e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a94:	2b22      	cmp	r3, #34	; 0x22
 8004a96:	d151      	bne.n	8004b3c <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004a9e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa4:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004aa6:	89ba      	ldrh	r2, [r7, #12]
 8004aa8:	89fb      	ldrh	r3, [r7, #14]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	b29a      	uxth	r2, r3
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab6:	1c9a      	adds	r2, r3, #2
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	b29a      	uxth	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d138      	bne.n	8004b4c <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004ae8:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	689a      	ldr	r2, [r3, #8]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 0201 	bic.w	r2, r2, #1
 8004af8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2220      	movs	r2, #32
 8004afe:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d10f      	bne.n	8004b2e <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f022 0210 	bic.w	r2, r2, #16
 8004b1c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004b24:	4619      	mov	r1, r3
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7ff fb12 	bl	8004150 <HAL_UARTEx_RxEventCallback>
 8004b2c:	e002      	b.n	8004b34 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7fb fda8 	bl	8000684 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004b3a:	e007      	b.n	8004b4c <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	699a      	ldr	r2, [r3, #24]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f042 0208 	orr.w	r2, r2, #8
 8004b4a:	619a      	str	r2, [r3, #24]
}
 8004b4c:	bf00      	nop
 8004b4e:	3710      	adds	r7, #16
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <__libc_init_array>:
 8004b68:	b570      	push	{r4, r5, r6, lr}
 8004b6a:	4e0d      	ldr	r6, [pc, #52]	; (8004ba0 <__libc_init_array+0x38>)
 8004b6c:	4c0d      	ldr	r4, [pc, #52]	; (8004ba4 <__libc_init_array+0x3c>)
 8004b6e:	1ba4      	subs	r4, r4, r6
 8004b70:	10a4      	asrs	r4, r4, #2
 8004b72:	2500      	movs	r5, #0
 8004b74:	42a5      	cmp	r5, r4
 8004b76:	d109      	bne.n	8004b8c <__libc_init_array+0x24>
 8004b78:	4e0b      	ldr	r6, [pc, #44]	; (8004ba8 <__libc_init_array+0x40>)
 8004b7a:	4c0c      	ldr	r4, [pc, #48]	; (8004bac <__libc_init_array+0x44>)
 8004b7c:	f000 f820 	bl	8004bc0 <_init>
 8004b80:	1ba4      	subs	r4, r4, r6
 8004b82:	10a4      	asrs	r4, r4, #2
 8004b84:	2500      	movs	r5, #0
 8004b86:	42a5      	cmp	r5, r4
 8004b88:	d105      	bne.n	8004b96 <__libc_init_array+0x2e>
 8004b8a:	bd70      	pop	{r4, r5, r6, pc}
 8004b8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b90:	4798      	blx	r3
 8004b92:	3501      	adds	r5, #1
 8004b94:	e7ee      	b.n	8004b74 <__libc_init_array+0xc>
 8004b96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b9a:	4798      	blx	r3
 8004b9c:	3501      	adds	r5, #1
 8004b9e:	e7f2      	b.n	8004b86 <__libc_init_array+0x1e>
 8004ba0:	08004c20 	.word	0x08004c20
 8004ba4:	08004c20 	.word	0x08004c20
 8004ba8:	08004c20 	.word	0x08004c20
 8004bac:	08004c24 	.word	0x08004c24

08004bb0 <memset>:
 8004bb0:	4402      	add	r2, r0
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d100      	bne.n	8004bba <memset+0xa>
 8004bb8:	4770      	bx	lr
 8004bba:	f803 1b01 	strb.w	r1, [r3], #1
 8004bbe:	e7f9      	b.n	8004bb4 <memset+0x4>

08004bc0 <_init>:
 8004bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bc2:	bf00      	nop
 8004bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bc6:	bc08      	pop	{r3}
 8004bc8:	469e      	mov	lr, r3
 8004bca:	4770      	bx	lr

08004bcc <_fini>:
 8004bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bce:	bf00      	nop
 8004bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bd2:	bc08      	pop	{r3}
 8004bd4:	469e      	mov	lr, r3
 8004bd6:	4770      	bx	lr
